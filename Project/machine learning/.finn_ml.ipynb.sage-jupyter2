{"backend_state":"init","connection_file":"/projects/39b268b1-0e75-4ebd-9cf2-691243b37f4a/.local/share/jupyter/runtime/kernel-45d44636-ae40-4f1c-ae9e-f5a0743903fd.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"cell_type":"markdown","id":"b0cd97","input":"### Linear Regression:\n\nmodel = LinearRegression\\(\\)\n\nMSE: 0.0004449381082682105\n\nR^2: 0.9808307464549305\n","pos":0,"type":"cell"}
{"end":1657121248068,"exec_count":11,"id":"2d25d9","input":"np.array(outputs_test)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([4.00639993e-02, 4.30914248e-02, 1.77310662e-02, 1.00000000e+00,\n       4.22634114e-03, 8.86275091e-01, 1.38680960e-02, 8.80085465e-01,\n       5.62646872e-02, 2.63015565e-02, 8.75214737e-03, 6.61933291e-02,\n       8.40654735e-03, 9.88349575e-02, 1.28342807e-02, 5.47144091e-02,\n       7.97186835e-04, 9.15956264e-01, 8.48483701e-03, 6.13954146e-02,\n       8.95302882e-01, 1.04569106e-02, 4.83617839e-03, 1.79899399e-02,\n       6.96063052e-02, 1.35659066e-02, 8.74971831e-01, 1.83208573e-01,\n       9.72376355e-01, 1.03223083e-03, 1.64869982e-02, 2.59791674e-01,\n       5.61522669e-03, 2.86003965e-02, 4.58150940e-02, 9.65335393e-03,\n       4.28292647e-03, 8.98043991e-01, 7.18753989e-03, 3.54437929e-02,\n       7.51336455e-03, 3.54325208e-02, 1.85263259e-01, 2.53275530e-01,\n       1.58873530e-02, 4.39582543e-03, 7.58107159e-04, 1.15194544e-02,\n       5.23236605e-03, 5.69981068e-03, 9.33685265e-02, 8.24090729e-03,\n       2.83048855e-01, 1.05664321e-02, 1.27568949e-02, 4.23876793e-02,\n       4.36744386e-03, 7.12585954e-03, 4.47918142e-03, 1.83720699e-02,\n       5.41083692e-03, 3.39638050e-03, 1.94015340e-03, 1.74743924e-02,\n       1.21933456e-01, 7.34573565e-03, 4.30443666e-02, 1.64095098e-02,\n       1.17218149e-02, 2.27820880e-02, 1.84972502e-01, 4.59473030e-02,\n       5.48920875e-03, 3.93033535e-04, 1.34935840e-02, 4.69331751e-03,\n       5.65365952e-02, 4.96909807e-03, 9.90633629e-03, 7.87686357e-03,\n       1.26062720e-02, 5.21907274e-02, 2.24405478e-02, 1.78535998e-02,\n       1.48636257e-02, 1.75101566e-01, 8.54888151e-03, 3.77640174e-02,\n       7.96136106e-03, 8.21741103e-03, 2.83728861e-02, 6.28425920e-02,\n       4.38017177e-03, 9.50710492e-01, 4.55488503e-03, 1.01174928e-02,\n       5.83467295e-03, 2.52026162e-02, 7.57954060e-02, 6.38972839e-03,\n       6.44153219e-03, 1.83092925e-01, 1.83229783e-01, 1.88708401e-02,\n       4.38388257e-03, 5.56232614e-03, 7.05532369e-03, 8.38032703e-03,\n       1.47197687e-02, 7.10505851e-02, 1.02102127e-02, 9.58609940e-03,\n       2.84733128e-02, 5.03997660e-02, 5.95662280e-03, 4.91164713e-03,\n       3.18154714e-03, 2.82859422e-01, 2.71901521e-01, 1.01017590e-02,\n       6.50347169e-03, 3.71887473e-03, 5.51588800e-03, 7.47018823e-03,\n       9.82842209e-03, 8.43769857e-03, 8.44994631e-03, 3.79262509e-02,\n       6.33311952e-02, 4.58537837e-02, 5.50583756e-03, 7.32325850e-03,\n       6.41111883e-03, 1.40151029e-01, 4.95896544e-02, 9.98866586e-03,\n       7.39289118e-02, 6.01039189e-02, 1.82533864e-01, 2.71619255e-01,\n       1.60588527e-02, 6.83000998e-02, 3.00644692e-02, 4.98870150e-02,\n       5.17416985e-02, 7.81322230e-03, 3.23531912e-03, 1.76754621e-02,\n       4.38817855e-03, 4.64905666e-02, 4.36778792e-04, 5.47969798e-03,\n       1.42679633e-02, 1.24417570e-01, 1.29334358e-02, 6.10956974e-03,\n       5.00317649e-02, 9.05089926e-03, 9.96423167e-01, 8.93064774e-03,\n       1.76719594e-01, 1.17726776e-01, 6.57936952e-02, 8.28278067e-03])"},"exec_count":11}},"pos":9,"start":1657121248062,"state":"done","type":"cell"}
{"end":1657130161562,"exec_count":14,"id":"30a447","input":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split","kernel":"ds_env","pos":1,"start":1657130161557,"state":"done","type":"cell"}
{"end":1657130162333,"exec_count":15,"id":"fc6153","input":"df = pd.read_csv('../data/emissions_clean.csv')\ndf.drop('Country', axis=1, inplace=True)\ndf.dropna(inplace=True)\ndf.info()","kernel":"ds_env","output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 816 entries, 0 to 815\nData columns (total 11 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   Greenhouse Gas Emissions       816 non-null    float64\n 1   Year                           816 non-null    float64\n 2   Natural Gas Production         816 non-null    float64\n 3   Crude Oil Production           816 non-null    float64\n 4   Motor Gasoline Production      816 non-null    float64\n 5   Gas Oil/Diesel Oil Production  816 non-null    float64\n 6   Hard Coal Import               816 non-null    float64\n 7   Natural Gas Import             816 non-null    float64\n 8   Crude Oil Import               816 non-null    float64\n 9   Motor Gasoline Import          816 non-null    float64\n 10  Gas Oil/Diesel Oil Import      816 non-null    float64\ndtypes: float64(11)\nmemory usage: 70.2 KB\n"}},"pos":2,"start":1657130162314,"state":"done","type":"cell"}
{"end":1657130162351,"exec_count":16,"id":"421ff2","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\n\ntarget = df.pop('Greenhouse Gas Emissions')\ndf.info()","kernel":"ds_env","output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 816 entries, 0 to 815\nData columns (total 10 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   Year                           816 non-null    float64\n 1   Natural Gas Production         816 non-null    float64\n 2   Crude Oil Production           816 non-null    float64\n 3   Motor Gasoline Production      816 non-null    float64\n 4   Gas Oil/Diesel Oil Production  816 non-null    float64\n 5   Hard Coal Import               816 non-null    float64\n 6   Natural Gas Import             816 non-null    float64\n 7   Crude Oil Import               816 non-null    float64\n 8   Motor Gasoline Import          816 non-null    float64\n 9   Gas Oil/Diesel Oil Import      816 non-null    float64\ndtypes: float64(10)\nmemory usage: 63.9 KB\n"}},"pos":3,"start":1657130162344,"state":"done","type":"cell"}
{"end":1657130162815,"exec_count":17,"id":"14c7ca","input":"inputs_train, inputs_test, outputs_train, outputs_test = train_test_split(df, target, test_size=0.2)","kernel":"ds_env","pos":4,"start":1657130162809,"state":"done","type":"cell"}
{"end":1657130602958,"exec_count":21,"id":"656748","input":"model = LinearRegression()","kernel":"ds_env","pos":5,"start":1657130602951,"state":"done","type":"cell"}
{"end":1657130625410,"exec_count":23,"id":"4e68ae","input":"y_hat = model.predict(inputs_test)","kernel":"ds_env","pos":7,"start":1657130625403,"state":"done","type":"cell"}
{"end":1657130631657,"exec_count":24,"id":"34436b","input":"fig = px.scatter(x=outputs_test, y=y_hat)\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"149b1f0ef3e9a926d99111251fee6baba756cc6c"}}},"pos":10,"start":1657130631603,"state":"done","type":"cell"}
{"end":1657130702787,"exec_count":25,"id":"335a93","input":"from sklearn.metrics import mean_squared_error, r2_score\nprint(mean_squared_error(outputs_test, y_hat))\nr2_score(outputs_test, y_hat)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.0004449381082682105\n"},"1":{"data":{"text/plain":"0.9808307464549305"},"exec_count":25}},"pos":11,"start":1657130702779,"state":"done","type":"cell"}
{"exec_count":10,"id":"7be5f4","input":"y_hat","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([ 2.53167400e-02,  2.89390365e-02,  3.39984319e-02,  9.40310011e-01,\n        1.98856872e-03,  8.81539925e-01,  2.43449419e-02,  1.02632553e+00,\n        6.21004818e-02,  4.78850859e-02,  1.17177570e-02,  8.31523992e-02,\n        1.16927608e-02,  1.23056690e-01,  1.33740233e-02,  5.17143628e-02,\n        1.85731135e-02,  9.34922559e-01,  9.22948063e-03,  8.58302650e-02,\n        1.02746194e+00,  1.54387320e-02,  2.00333655e-02,  3.58740200e-03,\n        4.08988821e-02,  3.95123782e-02,  9.83035234e-01,  1.84921964e-01,\n        9.69416369e-01, -8.73858591e-03,  1.15775187e-03,  2.50059651e-01,\n       -6.16262509e-03,  4.93411716e-02,  4.54445999e-02,  1.59299109e-02,\n        1.01731962e-03,  8.83726986e-01,  7.36418491e-03,  1.96828020e-02,\n        9.79320393e-03,  1.70024293e-02,  1.94450946e-01,  2.16648082e-01,\n        9.07039155e-03, -2.82174002e-03,  1.99677315e-02,  2.70252094e-03,\n       -3.85910194e-03, -8.92424762e-04,  7.26346917e-02,  9.48462926e-03,\n        2.29966895e-01,  2.66983856e-03, -4.82354961e-04,  6.15822044e-03,\n        5.66560689e-03,  7.03268510e-03,  3.96476194e-03,  3.14153129e-02,\n       -8.34445032e-03, -3.32618907e-03, -1.94230062e-03,  1.12147714e-02,\n        1.16994074e-01,  3.65579491e-02,  4.13469075e-02,  7.25100924e-03,\n        2.90056391e-02,  4.46272419e-02,  1.92635049e-01,  3.33269158e-02,\n        3.39977792e-03,  1.31995094e-02,  1.28591212e-02,  6.96776228e-03,\n        5.42406155e-02,  2.15305999e-02,  1.55724540e-02,  1.18791118e-02,\n       -1.66202262e-03,  1.03524293e-02,  1.81565659e-02,  4.50588070e-03,\n        1.09465678e-02,  1.90185464e-01,  1.14756001e-02,  3.57264128e-02,\n        3.31724224e-03,  1.23795167e-02,  5.39166403e-02,  8.58862421e-02,\n       -6.73315344e-03,  9.57002058e-01,  1.81883635e-02,  1.34317864e-02,\n       -1.91685744e-03,  2.21908795e-02,  9.06199853e-02,  2.28426723e-02,\n        7.85564581e-03,  1.83526795e-01,  1.71389384e-01,  3.39666385e-02,\n       -4.94081867e-03, -1.79736867e-03,  3.08662798e-02,  1.22085480e-02,\n        1.14817335e-02,  5.41455817e-02,  1.88569538e-02,  1.37607893e-02,\n        5.40757676e-02,  3.98568586e-02, -5.27263724e-03,  2.10775700e-02,\n       -5.26887596e-03,  3.06751106e-01,  2.63932254e-01,  9.76174370e-03,\n        2.57448602e-03, -1.56334318e-04, -1.71848331e-03,  3.19172481e-02,\n        6.67111627e-03,  7.21565988e-03,  1.53514231e-02,  1.95116004e-02,\n        5.42786846e-02,  5.05947524e-02, -5.37809966e-03,  3.00695735e-02,\n       -7.41666767e-04,  1.25910555e-01,  4.44698921e-02,  1.00762873e-02,\n        8.57612389e-02,  1.49503307e-02,  1.65560074e-01,  2.64783290e-01,\n        9.49100672e-03,  4.12926852e-02,  1.80045526e-02,  4.10114064e-02,\n        9.24493786e-03,  8.92120106e-03, -6.03294131e-03,  3.47799755e-02,\n        4.85339777e-03,  9.97570727e-03,  1.28805668e-02,  3.14236911e-04,\n        1.07198019e-02,  1.26991714e-01, -2.41666042e-03, -3.28856243e-03,\n        8.47958132e-03,  7.75282347e-03,  9.47041127e-01,  1.71058908e-02,\n        1.73261974e-01,  1.35991392e-01,  4.07411335e-02,  3.67964961e-03])"},"exec_count":10}},"pos":8,"state":"done","type":"cell"}
{"exec_count":26,"id":"95c199","input":"\nmodel.fit(inputs_train, outputs_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>","text/plain":"LinearRegression()"},"exec_count":26}},"pos":6,"state":"done","type":"cell"}
{"id":"0be631","input":"","pos":6.5,"type":"cell"}
{"id":"52c140","input":"","pos":13,"type":"cell"}
{"id":"92db06","input":"","pos":14,"type":"cell"}
{"id":"b8ca89","input":"","pos":12,"type":"cell"}
{"id":0,"time":1657563772063,"type":"user"}
{"last_load":1657119364831,"type":"file"}