{"backend_state":"running","connection_file":"/projects/39b268b1-0e75-4ebd-9cf2-691243b37f4a/.local/share/jupyter/runtime/kernel-0e353ec0-bde4-4347-9ff5-4cebafe44439.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1656689621622,"exec_count":2,"id":"a63ae2","input":"import plotly.express as px\nimport pandas as pd","kernel":"ds_env","pos":0,"start":1656689621078,"state":"done","type":"cell"}
{"cell_type":"code","end":1656689623618,"exec_count":3,"id":"2af914","input":"df = pd.read_csv(\"./emissions_dataset.csv\")","kernel":"ds_env","pos":1,"start":1656689623601,"state":"done","type":"cell"}
{"cell_type":"code","end":1656689624618,"exec_count":4,"id":"0c64c0","input":"print((df.isnull().sum() * 100/len(df)).sum()/18)\nprint((df.isnull().sum()).sum())","kernel":"ds_env","output":{"0":{"name":"stdout","text":"30.83118001722653\n7159\n"}},"pos":2,"start":1656689624610,"state":"done","type":"cell"}
{"cell_type":"code","end":1656689626085,"exec_count":5,"id":"ec0a68","input":"df.info()","kernel":"ds_env","output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1290 entries, 0 to 1289\nData columns (total 18 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   Greenhouse Gas Emissions       1290 non-null   float64\n 1   Country                        1290 non-null   object \n 2   Year                           1290 non-null   int64  \n 3   Hard Coal Production           451 non-null    float64\n 4   Natural Gas Production         747 non-null    float64\n 5   Crude Oil Production           724 non-null    float64\n 6   Motor Gasoline Production      879 non-null    float64\n 7   Gas Oil/Diesel Oil Production  879 non-null    float64\n 8   Hard Coal Import               1015 non-null   float64\n 9   Natural Gas Import             921 non-null    float64\n 10  Crude Oil Import               883 non-null    float64\n 11  Motor Gasoline Import          1050 non-null   float64\n 12  Gas Oil/Diesel Oil Import      1059 non-null   float64\n 13  Hard Coal Export               661 non-null    float64\n 14  Natural Gas Export             480 non-null    float64\n 15  Crude Oil Export               546 non-null    float64\n 16  Motor Gasoline Export          930 non-null    float64\n 17  Gas Oil/Diesel Oil Export      966 non-null    float64\ndtypes: float64(16), int64(1), object(1)\nmemory usage: 181.5+ KB\n"}},"pos":3,"start":1656689626057,"state":"done","type":"cell"}
{"cell_type":"code","end":1656689633699,"exec_count":6,"id":"b0f6e7","input":"# Show correlation matrix\nfig = px.imshow(df.corr(),title=\"Correlation Heatmap\",width=650,height=650)\nfig.update_xaxes(tickangle=-45)\nfig.write_html('./Charts/corr_heatmap.html')\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"4294b98b210a42f17287ce14fc538232dcf7e584"}}},"pos":4,"start":1656689633233,"state":"done","type":"cell"}
{"cell_type":"code","end":1656689635892,"exec_count":7,"id":"11f14c","input":"fig = px.scatter(df, x='Gas Oil/Diesel Oil Production', y='Gas Oil/Diesel Oil Import')\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"b8156cac4b013a644fe56119cc7f7c5322cace26"}}},"pos":5,"start":1656689635787,"state":"done","type":"cell"}
{"cell_type":"code","end":1656689669408,"exec_count":8,"id":"85c5e8","input":"# remove rows with too many missing values\nMAX_MISSING = 5\ndf.drop(df[df.isnull().sum(axis=1)>MAX_MISSING].index,axis=0,inplace=True)\n# https://stackoverflow.com/questions/55207940/remove-the-missing-values-from-the-rows-having-greater-than-5-missing-values-and\n\ndf.info()","kernel":"ds_env","output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 816 entries, 0 to 1289\nData columns (total 18 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   Greenhouse Gas Emissions       816 non-null    float64\n 1   Country                        816 non-null    object \n 2   Year                           816 non-null    int64  \n 3   Hard Coal Production           451 non-null    float64\n 4   Natural Gas Production         731 non-null    float64\n 5   Crude Oil Production           722 non-null    float64\n 6   Motor Gasoline Production      813 non-null    float64\n 7   Gas Oil/Diesel Oil Production  813 non-null    float64\n 8   Hard Coal Import               796 non-null    float64\n 9   Natural Gas Import             742 non-null    float64\n 10  Crude Oil Import               810 non-null    float64\n 11  Motor Gasoline Import          808 non-null    float64\n 12  Gas Oil/Diesel Oil Import      816 non-null    float64\n 13  Hard Coal Export               616 non-null    float64\n 14  Natural Gas Export             480 non-null    float64\n 15  Crude Oil Export               545 non-null    float64\n 16  Motor Gasoline Export          805 non-null    float64\n 17  Gas Oil/Diesel Oil Export      806 non-null    float64\ndtypes: float64(16), int64(1), object(1)\nmemory usage: 121.1+ KB\n"}},"pos":9,"start":1656689669389,"state":"done","type":"cell"}
{"cell_type":"code","end":1656689681159,"exec_count":9,"id":"d6a956","input":"# Missing value counts after dropping rows with many missing values \ncolumns = list(df.columns)\nmissing_vals_2 = []\nfor col in columns:\n    missing_vals_2.append(df[col].isna().sum())\n\nfig = px.bar(x=columns, y=missing_vals_2, title='Missing Value Analysis After Dropping Rows')\nfig.update_layout(xaxis_title='Column', yaxis_title='Missing Values')\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"35caf770441750f8852f9601bda2d91e85f36da8"}}},"pos":10,"start":1656689680967,"state":"done","type":"cell"}
{"cell_type":"code","end":1656689689762,"exec_count":10,"id":"be260e","input":"\nfig = px.box(df, x=\"Year\", y=\"Greenhouse Gas Emissions\", title=\"\")\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"9117d906fd1ed82db8968773406214551db69dbc"}}},"pos":11,"start":1656689689680,"state":"done","type":"cell"}
{"cell_type":"code","end":1656690311629,"exec_count":26,"id":"528eb8","input":"fig = px.scatter(df, x='Year', y=\"Greenhouse Gas Emissions\", color=\"Country\", size=\"Motor Gasoline Import\")\nfig.show()","kernel":"ds_env","output":{"0":{"ename":"ValueError","evalue":"\n    Invalid element(s) received for the 'size' property of scatter.marker\n        Invalid elements include: [nan]\n\n    The 'size' property is a number and may be specified as:\n      - An int or float in the interval [0, inf]\n      - A tuple, list, or one-dimensional numpy array of the above","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [26]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m fig \u001b[38;5;241m=\u001b[39m \u001b[43mpx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mscatter\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mYear\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mGreenhouse Gas Emissions\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcolor\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mCountry\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msize\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mMotor Gasoline Import\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      2\u001b[0m fig\u001b[38;5;241m.\u001b[39mshow()\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/express/_chart_types.py:66\u001b[0m, in \u001b[0;36mscatter\u001b[0;34m(data_frame, x, y, color, symbol, size, hover_name, hover_data, custom_data, text, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, error_x, error_x_minus, error_y, error_y_minus, animation_frame, animation_group, category_orders, labels, orientation, color_discrete_sequence, color_discrete_map, color_continuous_scale, range_color, color_continuous_midpoint, symbol_sequence, symbol_map, opacity, size_max, marginal_x, marginal_y, trendline, trendline_options, trendline_color_override, trendline_scope, log_x, log_y, range_x, range_y, render_mode, title, template, width, height)\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mscatter\u001b[39m(\n\u001b[1;32m     13\u001b[0m     data_frame\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m     14\u001b[0m     x\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     60\u001b[0m     height\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m     61\u001b[0m ):\n\u001b[1;32m     62\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m     63\u001b[0m \u001b[38;5;124;03m    In a scatter plot, each row of `data_frame` is represented by a symbol\u001b[39;00m\n\u001b[1;32m     64\u001b[0m \u001b[38;5;124;03m    mark in 2D space.\u001b[39;00m\n\u001b[1;32m     65\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m---> 66\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mmake_figure\u001b[49m\u001b[43m(\u001b[49m\u001b[43margs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlocals\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconstructor\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgo\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mScatter\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/express/_core.py:2126\u001b[0m, in \u001b[0;36mmake_figure\u001b[0;34m(args, constructor, trace_patch, layout_patch)\u001b[0m\n\u001b[1;32m   2121\u001b[0m         group[var] \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m100.0\u001b[39m \u001b[38;5;241m*\u001b[39m group[var] \u001b[38;5;241m/\u001b[39m group_sum\n\u001b[1;32m   2123\u001b[0m patch, fit_results \u001b[38;5;241m=\u001b[39m make_trace_kwargs(\n\u001b[1;32m   2124\u001b[0m     args, trace_spec, group, mapping_labels\u001b[38;5;241m.\u001b[39mcopy(), sizeref\n\u001b[1;32m   2125\u001b[0m )\n\u001b[0;32m-> 2126\u001b[0m \u001b[43mtrace\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mupdate\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpatch\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2127\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m fit_results \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   2128\u001b[0m     trendline_rows\u001b[38;5;241m.\u001b[39mappend(mapping_labels\u001b[38;5;241m.\u001b[39mcopy())\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/basedatatypes.py:5092\u001b[0m, in \u001b[0;36mBasePlotlyType.update\u001b[0;34m(self, dict1, overwrite, **kwargs)\u001b[0m\n\u001b[1;32m   5090\u001b[0m         BaseFigure\u001b[38;5;241m.\u001b[39m_perform_update(\u001b[38;5;28mself\u001b[39m, kwargs, overwrite\u001b[38;5;241m=\u001b[39moverwrite)\n\u001b[1;32m   5091\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 5092\u001b[0m     \u001b[43mBaseFigure\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_perform_update\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdict1\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43moverwrite\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43moverwrite\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   5093\u001b[0m     BaseFigure\u001b[38;5;241m.\u001b[39m_perform_update(\u001b[38;5;28mself\u001b[39m, kwargs, overwrite\u001b[38;5;241m=\u001b[39moverwrite)\n\u001b[1;32m   5095\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/basedatatypes.py:3908\u001b[0m, in \u001b[0;36mBaseFigure._perform_update\u001b[0;34m(plotly_obj, update_obj, overwrite)\u001b[0m\n\u001b[1;32m   3902\u001b[0m validator \u001b[38;5;241m=\u001b[39m plotly_obj\u001b[38;5;241m.\u001b[39m_get_prop_validator(key)\n\u001b[1;32m   3904\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(validator, CompoundValidator) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(val, \u001b[38;5;28mdict\u001b[39m):\n\u001b[1;32m   3905\u001b[0m \n\u001b[1;32m   3906\u001b[0m     \u001b[38;5;66;03m# Update compound objects recursively\u001b[39;00m\n\u001b[1;32m   3907\u001b[0m     \u001b[38;5;66;03m# plotly_obj[key].update(val)\u001b[39;00m\n\u001b[0;32m-> 3908\u001b[0m     \u001b[43mBaseFigure\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_perform_update\u001b[49m\u001b[43m(\u001b[49m\u001b[43mplotly_obj\u001b[49m\u001b[43m[\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mval\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3909\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(validator, CompoundArrayValidator):\n\u001b[1;32m   3910\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m plotly_obj[key]:\n\u001b[1;32m   3911\u001b[0m         \u001b[38;5;66;03m# plotly_obj has an existing non-empty array for key\u001b[39;00m\n\u001b[1;32m   3912\u001b[0m         \u001b[38;5;66;03m# In this case we merge val into the existing elements\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/basedatatypes.py:3929\u001b[0m, in \u001b[0;36mBaseFigure._perform_update\u001b[0;34m(plotly_obj, update_obj, overwrite)\u001b[0m\n\u001b[1;32m   3926\u001b[0m                 plotly_obj[key] \u001b[38;5;241m=\u001b[39m val\n\u001b[1;32m   3927\u001b[0m         \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   3928\u001b[0m             \u001b[38;5;66;03m# Assign non-compound value\u001b[39;00m\n\u001b[0;32m-> 3929\u001b[0m             plotly_obj[key] \u001b[38;5;241m=\u001b[39m val\n\u001b[1;32m   3931\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(plotly_obj, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m   3933\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(update_obj) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m   3934\u001b[0m         \u001b[38;5;66;03m# Nothing to do\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/basedatatypes.py:4827\u001b[0m, in \u001b[0;36mBasePlotlyType.__setitem__\u001b[0;34m(self, prop, value)\u001b[0m\n\u001b[1;32m   4823\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_set_array_prop(prop, value)\n\u001b[1;32m   4825\u001b[0m     \u001b[38;5;66;03m# ### Handle simple property ###\u001b[39;00m\n\u001b[1;32m   4826\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4827\u001b[0m         \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_set_prop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mprop\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4828\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   4829\u001b[0m     \u001b[38;5;66;03m# Make sure properties dict is initialized\u001b[39;00m\n\u001b[1;32m   4830\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_init_props()\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/basedatatypes.py:5171\u001b[0m, in \u001b[0;36mBasePlotlyType._set_prop\u001b[0;34m(self, prop, val)\u001b[0m\n\u001b[1;32m   5169\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[1;32m   5170\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 5171\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m err\n\u001b[1;32m   5173\u001b[0m \u001b[38;5;66;03m# val is None\u001b[39;00m\n\u001b[1;32m   5174\u001b[0m \u001b[38;5;66;03m# -----------\u001b[39;00m\n\u001b[1;32m   5175\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m val \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   5176\u001b[0m     \u001b[38;5;66;03m# Check if we should send null update\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/plotly/basedatatypes.py:5166\u001b[0m, in \u001b[0;36mBasePlotlyType._set_prop\u001b[0;34m(self, prop, val)\u001b[0m\n\u001b[1;32m   5163\u001b[0m validator \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_validator(prop)\n\u001b[1;32m   5165\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 5166\u001b[0m     val \u001b[38;5;241m=\u001b[39m \u001b[43mvalidator\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mvalidate_coerce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mval\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   5167\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m   5168\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_skip_invalid:\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/_plotly_utils/basevalidators.py:785\u001b[0m, in \u001b[0;36mNumberValidator.validate_coerce\u001b[0;34m(self, v)\u001b[0m\n\u001b[1;32m    780\u001b[0m             v_invalid \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mlogical_not(v_valid)\n\u001b[1;32m    781\u001b[0m             some_invalid_els \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray(v, dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobject\u001b[39m\u001b[38;5;124m\"\u001b[39m)[v_invalid][\n\u001b[1;32m    782\u001b[0m                 :\u001b[38;5;241m10\u001b[39m\n\u001b[1;32m    783\u001b[0m             ]\u001b[38;5;241m.\u001b[39mtolist()\n\u001b[0;32m--> 785\u001b[0m             \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mraise_invalid_elements\u001b[49m\u001b[43m(\u001b[49m\u001b[43msome_invalid_els\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    787\u001b[0m     v \u001b[38;5;241m=\u001b[39m v_array  \u001b[38;5;66;03m# Always numeric numpy array\u001b[39;00m\n\u001b[1;32m    788\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39marray_ok \u001b[38;5;129;01mand\u001b[39;00m is_simple_array(v):\n\u001b[1;32m    789\u001b[0m     \u001b[38;5;66;03m# Check numeric\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/_plotly_utils/basevalidators.py:305\u001b[0m, in \u001b[0;36mBaseValidator.raise_invalid_elements\u001b[0;34m(self, invalid_els)\u001b[0m\n\u001b[1;32m    303\u001b[0m     \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mraise_invalid_elements\u001b[39m(\u001b[38;5;28mself\u001b[39m, invalid_els):\n\u001b[1;32m    304\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m invalid_els:\n\u001b[0;32m--> 305\u001b[0m             \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    306\u001b[0m                 \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    307\u001b[0m \u001b[38;5;124;03m    Invalid element(s) received for the '{name}' property of {pname}\u001b[39;00m\n\u001b[1;32m    308\u001b[0m \u001b[38;5;124;03m        Invalid elements include: {invalid}\u001b[39;00m\n\u001b[1;32m    309\u001b[0m \n\u001b[1;32m    310\u001b[0m \u001b[38;5;124;03m{valid_clr_desc}\"\"\"\u001b[39;00m\u001b[38;5;241m.\u001b[39mformat(\n\u001b[1;32m    311\u001b[0m                     name\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mplotly_name,\n\u001b[1;32m    312\u001b[0m                     pname\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mparent_name,\n\u001b[1;32m    313\u001b[0m                     invalid\u001b[38;5;241m=\u001b[39minvalid_els[:\u001b[38;5;241m10\u001b[39m],\n\u001b[1;32m    314\u001b[0m                     valid_clr_desc\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdescription(),\n\u001b[1;32m    315\u001b[0m                 )\n\u001b[1;32m    316\u001b[0m             )\n","\u001b[0;31mValueError\u001b[0m: \n    Invalid element(s) received for the 'size' property of scatter.marker\n        Invalid elements include: [nan]\n\n    The 'size' property is a number and may be specified as:\n      - An int or float in the interval [0, inf]\n      - A tuple, list, or one-dimensional numpy array of the above"]}},"pos":12,"start":1656690311303,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5c2c9b","input":"","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"ae4b78","input":"","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c5f894","input":"","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e81793","input":"","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"eac7ff","input":"","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f425fa","input":"","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"ac493c","input":"df.columns.values","output":{"0":{"data":{"text/plain":"array(['Greenhouse Gas Emissions', 'Year', 'Hard Coal Production',\n       'Natural Gas Production', 'Crude Oil Production',\n       'Motor Gasoline Production', 'Gas Oil/Diesel Oil Production',\n       'Hard Coal Import', 'Natural Gas Import', 'Crude Oil Import',\n       'Motor Gasoline Import', 'Gas Oil/Diesel Oil Import',\n       'Hard Coal Export', 'Natural Gas Export', 'Crude Oil Export',\n       'Motor Gasoline Export', 'Gas Oil/Diesel Oil Export'], dtype=object)"},"execution_count":19,"metadata":{},"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"35bf50","input":"df2 = df[['Motor Gasoline Production', 'Greenhouse Gas Emissions', 'Gas Oil/Diesel Oil Export']]\ndf2.dropna(axis=0, how='any', inplace=True)\nfig = px.scatter(df2, x='Motor Gasoline Production', y='Greenhouse Gas Emissions', color='Gas Oil/Diesel Oil Export')\nfig.show()","output":{"0":{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_884/1253923394.py:2: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n"},"1":{"data":{"text/html":"<html>\n<head><meta charset=\"utf-8\" /></head>\n<body>\n    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n        <script src=\"https://cdn.plot.ly/plotly-2.9.0.min.js\"></script>                <div id=\"2ead8e61-caf4-42d9-ac00-0541fe4467a6\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"2ead8e61-caf4-42d9-ac00-0541fe4467a6\")) {                    Plotly.newPlot(                        \"2ead8e61-caf4-42d9-ac00-0541fe4467a6\",                        [{\"hovertemplate\":\"Motor Gasoline Production=%{x}<br>Greenhouse Gas Emissions=%{y}<br>Gas Oil/Diesel Oil Export=%{marker.color}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":[619.0,748.0,702.0,557.0,682.0,560.0,1016.0,1152.0,1103.0,1040.0,904.0,1080.0,801.0,888.0,736.0,309.0,353.0,243.0,390.0,302.0,158.0,99.0,109.0,77.0,51.0,64.0,44.0,88.906,72.563,94.766,3.0,96.0,73.0,163.0,136.0,83.0,97.0,271.0,467.0,459.0,416.0,418.0,520.0,539.0,580.0,909.111,630.297,954.633,1074.496,838.076,872.821,898.831,1011.247,961.313,1011.705,892.288,841.012,963.969,1007.931,1077.418,5645.0,5898.0,5428.0,5534.0,5497.0,5790.0,6116.0,5858.0,6117.0,7355.0,7422.0,7589.0,7643.0,7419.0,8193.0,8919.0,7932.0,8703.0,8423.0,8131.0,6594.0,7863.0,9579.0,11011.0,11768.0,10783.0,11659.0,12309.7,11575.1,10982.4,499.0,12.0,109.0,400.0,1272.0,1179.0,1190.0,1001.0,870.0,1029.0,850.0,727.0,522.0,512.0,467.0,665.0,1085.0,1189.0,1086.0,739.0,693.0,652.0,965.0,1039.0,842.0,927.0,1382.0,1769.107,958.547,1566.818,1869.0,276.0,1231.0,1711.0,1470.0,990.0,1609.0,1761.0,2339.0,2298.0,3270.0,3493.0,4250.0,4691.0,5366.0,4555.0,4722.0,5312.0,3449.0,5750.0,7576.0,4356.0,5160.0,6217.0,4850.0,4303.0,3450.0,3900.0,3955.0,5113.0,4296.0,5327.0,4859.0,5022.0,5596.0,5415.0,4835.0,5729.0,5374.0,6288.0,6386.0,7244.0,7047.0,6589.0,6833.0,7047.0,7766.0,7607.0,6967.0,6334.0,7879.0,7940.0,6375.0,6774.0,6728.0,8027.0,6397.0,7627.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,170.0,447.0,577.0,369.0,447.0,409.0,580.0,617.0,492.0,603.0,693.0,640.0,365.0,524.0,360.0,299.0,672.0,419.0,715.0,651.0,759.0,690.0,879.0,1093.0,857.0,898.0,842.0,843.0,2338.0,3528.0,3599.0,3749.0,3434.0,3593.0,3004.0,3894.0,4324.0,5448.0,5576.0,6242.0,6328.0,8150.0,10003.0,10946.0,12276.0,9979.0,8906.0,6820.0,6488.0,6364.0,7076.0,7694.0,8438.0,9511.0,9022.0,8221.0,7480.0,868.0,1089.0,1441.0,1596.0,1795.0,1477.0,1220.0,1065.0,693.0,1174.0,1219.0,901.0,978.0,1160.0,1141.0,967.0,1672.0,1103.0,1016.0,1157.0,1011.0,1246.0,1480.0,1679.0,1671.0,2573.0,2816.0,2354.339,1763.085,1965.405,401.0,1147.0,1337.0,1434.0,1514.0,824.0,1151.0,781.0,957.0,729.0,848.0,572.0,783.0,747.0,656.0,822.0,950.0,951.0,1003.0,777.0,1148.0,2373.0,6192.0,5400.0,5071.0,5403.0,5381.0,6578.0,6140.0,5983.0,432.0,1168.0,1430.0,1196.0,1165.0,1075.0,1339.0,1246.0,1722.0,1577.0,1947.0,2054.0,1933.0,2243.0,1882.0,1839.0,2222.0,2569.0,3072.0,2566.0,2912.0,2839.0,3123.0,4005.0,3638.0,2910.0,3813.0,3739.0,3587.0,3773.0,4430.0,6443.0,5665.0,6528.0,5904.0,5862.0,6006.0,6586.0,6199.0,6668.0,6416.0,5287.0,6352.0,5528.0,6623.0,6314.0,5820.0,6517.0,7246.0,6033.0,6479.0,7794.0,7647.0,6149.0,5403.0,4599.0,4884.0,3875.0,4299.0,4225.0,556.0,496.0,509.0,201.0,267.0,342.0,493.0,185.0,284.0,586.0,576.0,794.0,891.0,1102.0,1164.0,1480.0,2311.0,2307.0,2087.0,3018.0,2997.0,3075.0,4740.0,5706.0,6592.0,6563.0,7363.0,7127.084,7570.918,7060.491,215.0,407.0,441.0,512.0,451.0,503.0,519.0,613.0,357.0,439.0,401.0,454.0,495.0,349.0,394.0,514.0,534.0,302.0,374.0,378.0,387.0,443.0,526.0,597.0,675.0,939.0,976.0,1122.8,589.0,287.0,443.0,929.0,1096.0,1060.0,973.0,830.0,859.0,904.0,788.0,957.0,1293.0,1376.0,1298.0,1377.0,1257.0,1304.0,1340.0,974.0,1285.0,1277.0,1438.0,1384.0,1576.0,1150.0,1231.0,1414.0,1939.0,1450.0,4.0,46.0,132.0,65.0,108.0,171.0,31.0,138.0,75.0,10.0,35.0,47.0,50.0,118.0,124.0,154.0,82.0,14.0,19.0,22.0,372.0,185.0,309.0,0.0,17.0,60.0,114.0,187.0,98.749,158.659,1088.0,1600.0,1767.0,2138.0,2471.0,3004.0,2063.0,3033.0,2153.0,1874.0,1694.0,1659.0,1149.0,1090.0,1277.0,3413.0,4147.0,7642.0,11340.0,10013.0,9854.0,6644.0,5994.0,9011.0,7650.0,8670.0,8138.0,8502.173,7900.961,9032.626,367.0,1473.0,866.0,644.0,776.0,1098.0,1390.0,766.0,667.0,1444.0,1401.0,1651.0,2180.0,2194.0,1660.0,1024.0,2191.0,2397.0,2699.0,2984.0,2989.0,3404.0,2999.0,3957.0,3578.0,3171.6,2725.6,2619.9,15865.0,17186.0,17245.0,18256.0,16518.0,18921.0,20399.0,21587.0,20969.0,19928.0,19323.0,22122.0,21692.0,20641.0,20802.0,21597.0,24602.0,20717.0,22836.0,27518.0,31153.0,30918.0,29277.0,29535.0,27798.0,26756.5,30158.31,29298.806,23284.794,24031.164,223.0,272.0,96.0,187.0,88.0,0.0,2.0,43.0,62.0,20.0,5.0,0.0,7.0,14.0,5.0,6.0,21.0,0.0,31.0,0.0,30.92,185.0,224.0,23.0,3.0,2.0,1.0,6.0,14.0,13.0,62.0,52.0,237.0,339.0,161.0,291.0,596.0,313.0,342.0,268.0,118.0,24.0,112.0,337.0,608.0,968.0,1790.0,1086.0,187.157,36.184,58.795,344.0,135.0,315.0,646.0,1295.0,1026.0,428.0,309.0,290.0,78.0,152.0,90.0,6.0,51.0,71.0,211.0,314.0,192.0,164.0,95.0,35.0,120.0,350.0,1693.0,1295.0,2284.0,2076.0,2079.034,1134.429,899.898,2229.0,979.0,615.0,976.0,2226.0,2025.0,1252.0,1031.0,1441.0,1023.0,1217.0,1304.0,1850.0,1350.0,1591.0,1900.0,1603.0,1171.0,1060.0,1080.0,817.0,722.0,709.0,865.0,1635.0,1609.0,1690.0,1547.133,1585.731,1531.049,13132.0,15848.0,15830.0,19532.0,23957.0,23818.0,24413.0,22476.0,24614.0,24471.0,28790.0,30029.0,30140.0,33983.0,36825.0,36791.0,37568.0,39774.0,41639.0,39526.0,41373.0,42424.0,37376.0,33547.0,34115.0,33683.524,33467.9,51528.0,491.0,660.0,830.0,861.0,937.0,1054.0,1164.0,1307.0,1441.0,1569.0,1567.0,1587.0,2013.0,1825.0,1899.0,2097.0,1982.0,2121.0,1896.0,2204.0,1899.0,2126.0,1941.0,2361.0,2198.0,2064.0,1803.0,1653.0,3.0,4.0,4.0,2.0,2.0,62.0,163.0,129.0,3141.0,2829.0,3526.0,3903.0,3710.0,3490.0,3452.0,3497.0,3198.0,3651.0,3859.0,3771.0,3574.0,3810.0,4290.0,3807.0,4154.0,3871.0,5028.0,4942.0,4589.0,3939.0,5099.0,3577.0,4829.0,5556.0,5315.0,6938.0,6361.0,3886.625,1.0,15.0,22.0,0.0,18.0,17.0,0.0,106.0,1095.0,701.0,26.0,208.0,582.0,931.0,903.0,1278.0,1773.0,579.0,524.0,395.0,344.0,124.0,227.0,91.0,55.0,73.0,72.0,233.0,120.0,1382.0,462.0,143.0,202.0,200.0,552.0,130.0,270.0,497.0,334.0,968.0,1399.0,1614.0,1315.0,1089.0,578.0,634.0,716.0,896.0,697.0,873.0,509.0,78.0,76.0,0.0,0.0,193.0,214.0,264.0,5701.0,10830.0,10780.0,13563.0,11864.0,9193.0,9679.0,8042.0,6296.0,8000.0,8588.0,6082.0,5560.0,5368.0,5496.0,6819.0,11119.0,13330.0,27267.0,29054.0,32602.0,42557.0,49271.0,55291.0,53915.0,57520.0,57712.0,67306.744,63127.359,64403.874],\"coloraxis\":\"coloraxis\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[11969.0,12098.0,12640.0,13020.0,13023.0,13164.0,13495.0,13256.0,13633.0,14092.0,13752.0,12309.0,13259.0,13108.0,13453.0,13218.0,12153.0,12992.0,12541.0,12570.0,12340.0,12222.0,11497.0,11456.0,10679.0,9397.0,8579.0,8130.51,8401.086,8171.161,2631.0,2400.0,2462.0,2340.0,2541.0,2271.0,2297.0,2410.0,2232.0,2141.0,1815.0,1922.0,1927.0,1811.0,1738.0,1798.0,1615.0,1704.0,1684.0,1652.0,1436.0,1531.0,1554.0,1549.0,1773.0,1721.0,1671.0,1692.394,1928.017,1970.747,5263.0,5883.0,6162.0,5614.0,5686.0,5259.0,5947.0,6103.0,6431.0,6032.0,5311.0,5493.0,5775.0,5865.0,5789.0,5056.0,5357.0,5041.0,4338.0,4591.0,4795.0,3782.0,4502.0,4192.0,4565.0,4906.0,4797.0,4608.3,4012.9,4252.5,1297.0,540.0,451.0,1544.0,1239.0,1477.0,1266.0,1112.0,925.0,1065.0,1017.0,1151.0,1030.0,967.0,1401.0,1381.0,1560.0,1466.0,1571.0,1457.0,1479.0,1531.0,1658.0,1757.0,1600.0,1788.0,1785.0,1847.789,1508.046,1777.566,2222.0,1687.0,1744.0,1849.0,1816.0,1954.0,1907.0,1685.0,1964.0,1824.0,1756.0,1895.0,2842.0,3330.0,3498.0,3181.0,3330.0,3272.0,3158.0,3135.0,3729.0,3683.0,3945.0,3925.0,3573.0,3481.0,3335.0,2900.0,26179.0,25652.0,25335.0,26555.0,27077.0,27567.0,28636.0,28353.0,28470.0,30107.0,30981.0,32222.0,33737.0,33689.0,33024.0,32270.0,30889.0,32630.0,30090.0,30609.0,30667.0,28587.0,29390.0,28795.0,28325.0,30167.0,31772.0,33229.0,30891.0,31117.0,122.0,121.0,102.0,94.0,122.0,102.0,95.0,141.0,142.0,1127.0,1032.0,969.0,1046.0,1237.0,1202.0,1056.0,954.0,1033.0,1104.0,1253.0,1344.0,1289.0,1467.0,1594.0,1555.0,1601.0,1412.0,1463.0,1330.0,1439.0,1252.0,1454.0,1533.0,1179.0,1521.0,1398.0,1483.0,24622.0,25330.0,26848.0,26419.0,25875.0,26105.0,25354.0,26222.0,26829.0,26972.0,26021.0,25970.0,26449.0,26467.0,27262.0,26576.0,25892.0,24820.0,23486.0,20940.0,20497.0,19487.0,19236.0,18856.0,18945.0,19674.0,19806.0,20718.0,20269.0,1318.0,1553.0,1538.0,1477.0,1595.0,2130.0,2596.0,2343.0,2176.0,2259.0,2278.0,2239.0,2074.0,2082.0,1986.0,1919.0,1987.0,1962.0,1924.0,2092.0,1817.0,1857.0,2011.0,2267.0,2106.0,2335.0,2098.0,2240.908,2189.155,2224.773,9230.0,8932.0,9441.0,9363.0,9570.0,9696.0,9260.0,9235.0,9930.0,9432.0,9615.0,9272.0,8871.0,9047.0,10434.0,10152.0,10038.0,9232.0,8729.0,8973.0,8013.0,7471.0,7231.0,7471.0,7275.0,9105.0,9555.0,9101.0,9211.0,9087.0,2971.0,3175.0,3570.0,3394.0,4085.0,4150.0,4241.0,3788.0,4056.0,4160.0,3891.0,3785.0,4350.0,4304.0,4321.0,4061.0,4298.0,4348.0,4308.0,4228.0,3887.0,4070.0,4166.0,4195.0,4323.0,3575.0,4109.0,4403.0,4435.0,4441.0,26724.0,27793.0,28126.0,28535.0,27562.0,27254.0,28048.0,28260.0,27392.0,25230.0,23440.0,21455.0,22944.0,22627.0,24589.0,22622.0,21368.0,21313.0,19521.0,19184.0,19074.0,18823.0,18650.0,17691.0,15709.0,16894.0,17343.0,17415.747,16575.389,16464.321,3379.0,3128.0,3581.0,3445.0,3543.0,3545.0,3383.0,3607.0,3671.0,3205.0,3758.0,3770.0,3802.0,3653.0,3629.0,4058.0,4327.0,4318.0,4251.0,4075.0,4407.0,3950.0,4592.0,4205.0,4649.0,4611.0,5169.0,5291.008,5351.102,5006.944,802.0,1038.0,1080.0,1177.0,1024.0,1089.0,1158.0,1209.0,1330.0,1210.0,1209.0,1261.0,1226.0,1168.0,1083.0,1202.0,1001.0,1207.0,1094.0,871.0,990.0,928.0,805.0,843.0,864.0,1005.3,894.8,711.5,1755.0,1557.0,1600.0,1280.0,1246.0,1396.0,1351.0,1392.0,1471.0,1416.0,1249.0,1401.0,1573.0,1477.0,1465.0,1321.0,1302.0,1322.0,1264.0,1238.0,1184.0,1130.0,1138.0,1067.0,1089.0,1152.0,1093.0,1023.0,1117.0,1093.0,340.0,333.0,361.0,367.0,354.0,377.0,380.0,452.0,468.0,435.0,532.0,669.0,660.0,639.0,552.0,683.0,635.0,493.0,570.0,481.0,463.0,506.0,501.0,502.0,489.0,602.0,547.0,551.481,601.443,508.607,31597.0,32964.0,34183.0,35733.0,36893.0,37816.0,38550.0,39551.0,41019.0,41533.0,41971.0,42867.0,42671.0,43140.0,42716.0,43259.0,42437.0,42801.0,41900.0,42229.0,43043.0,40139.0,39142.0,40183.0,39365.0,40291.0,39513.0,39156.562,37464.191,36019.631,848.0,1313.0,1037.0,858.0,1295.0,1664.0,2112.0,1369.0,1559.0,1889.0,1719.0,1882.0,2331.0,2462.0,2172.0,1569.0,2686.0,2585.0,2675.0,2694.0,2504.0,2535.0,2103.0,2403.0,2615.0,2738.1,2554.5,2465.1,8136.0,8545.0,8492.0,9151.0,8720.0,9245.0,9109.0,8887.0,8444.0,8654.0,8951.0,9337.0,7882.0,8116.0,7736.0,7999.0,8458.0,6887.0,6941.0,6898.0,7482.0,6608.0,6958.0,6582.0,6716.0,5419.0,3902.0,2951.15,3936.851,3997.327,1813.0,1727.0,1792.0,1811.0,1707.0,1584.0,1475.0,1550.0,1590.0,1371.0,1429.0,1500.0,1530.0,1520.0,1627.0,1269.0,1444.0,1485.0,1328.0,1370.0,1488.506,2365.0,2172.0,3089.0,3144.0,3212.0,2994.0,3132.0,3193.0,3347.0,3835.0,4257.0,4242.0,3932.0,3871.0,3978.0,4117.0,4155.0,3867.0,3665.0,4040.0,4025.0,3717.0,3803.0,3826.0,3627.0,3939.0,3947.0,3916.491,4208.114,4311.625,1704.0,1623.0,1860.0,1687.0,2354.0,2757.0,2591.0,2835.0,2792.0,2654.0,2296.0,2615.0,2518.0,2732.0,2551.0,2466.0,2750.0,2591.0,2091.0,2056.0,2218.0,1875.0,1864.0,2338.0,1924.0,2694.0,2619.0,2748.512,2501.064,2401.214,4666.0,3122.0,2923.0,2620.0,3420.0,3451.0,3125.0,3205.0,3197.0,2440.0,2625.0,2731.0,3569.0,3295.0,3419.0,4237.0,4145.0,3799.0,3654.0,3311.0,2823.0,2886.0,2751.0,2863.0,2998.0,2982.0,3405.0,3285.237,3381.432,3484.612,35289.0,30147.0,26828.0,28140.0,26780.0,27178.0,25922.0,26260.0,27152.0,27610.0,28992.0,29315.0,30505.0,32011.0,34368.0,35097.0,35602.0,35827.0,35926.0,36686.0,38232.0,39379.0,38935.0,39235.0,40004.0,38027.0,39053.2,39494.34,587.0,692.0,673.0,811.0,826.0,832.0,912.0,1017.0,1377.0,1438.0,1555.0,1597.0,1670.0,1584.0,1449.0,1596.0,1516.0,1496.0,1255.0,1411.0,1348.0,1395.0,1291.0,1485.0,1485.0,1395.0,1362.0,1137.0,135.0,138.0,74.0,120.0,79.0,14.0,42.0,35.0,3741.0,3686.0,4363.0,4361.0,3814.0,4102.0,4345.0,4571.0,4336.0,4303.0,4394.0,4020.0,3987.0,4309.0,4506.0,4045.0,4182.0,3729.0,4562.0,4506.0,3873.0,4003.0,4394.0,3425.0,4823.0,4992.0,4906.0,4674.0,5003.0,3653.0,3103.0,3014.0,3172.0,3535.0,3754.0,3973.0,3759.0,3916.0,3677.0,3300.0,2744.0,2968.0,3718.0,3837.0,3479.0,3609.0,3659.0,4098.0,4562.0,3963.0,3828.0,4272.0,4371.0,4278.0,3953.0,5113.0,5103.0,5366.0,4691.0,5298.0,5388.0,3324.0,3052.0,2610.0,2138.0,2803.0,2943.0,2539.0,2068.0,3920.0,4588.0,4308.0,4394.0,4609.0,3926.0,4161.0,3223.0,3259.0,2875.0,2837.0,1636.0,1015.0,712.0,643.0,350.0,731.0,817.527,900.8,300922.0,299961.0,307052.0,313505.0,310593.0,321676.0,327947.0,334470.0,340747.0,343136.0,344638.0,345287.0,350798.0,350258.0,351954.0,350574.0,348229.0,344914.0,345382.0,326005.0,340839.0,330464.0,329402.0,333503.0,341919.0,349073.0,360503.0,363315.989,368024.675,360563.398],\"xaxis\":\"x\",\"y\":[423672.224545862,423733.063875685,427426.084254575,428337.072226758,428818.220666782,437276.554470528,443928.268203045,456015.976421891,469751.524150252,476391.986612509,487777.762806434,495604.310396663,499190.485125836,500599.961947057,517726.513518175,524211.488965003,528038.421581892,534417.835021602,537262.311990541,540381.618373708,535549.224196195,537205.495236413,539511.054796992,530311.913740354,524709.397343331,533063.831868562,542287.865347481,549330.021694633,549731.942122923,545152.517975278,78420.4853134731,82082.331738836,75469.2711574783,75709.1891514719,75958.3025775219,79237.9773040888,82452.5892874996,82116.2292533559,81432.8496014841,79898.3650887788,80129.4314440238,84064.7193754262,85815.0591571954,91306.7154290499,90985.2342096688,92147.2855770051,89728.7820441705,86983.9414945287,86440.2107237771,79779.0725901318,84336.717724533,82127.0258881262,79432.3795290622,79817.1740579855,76238.6699808144,78462.2325972447,79471.0084930508,81862.4974062071,78627.637463622,79842.2526454428,145719.486913413,148439.217438971,148039.147330743,146897.392098987,151497.122984918,153616.789995408,157323.924537321,148852.497393644,154021.163362331,147789.333882851,148882.926232578,147324.61203195,147412.689540777,147713.445577613,148554.793362492,145561.698162783,142720.48278808,139071.662079489,138980.223062416,126325.021889627,133633.523202562,123134.281667017,120385.712201124,120443.490023094,114731.995510673,118959.981401646,117689.179213263,117424.30291644,117894.737828469,116651.489106771,99978.07998764,81795.8176676072,76218.3749029108,75610.6381342526,71519.5445227144,72908.9132896351,73249.268498804,70028.7627042527,65922.1944987328,58817.0415349403,57864.2728863735,60776.8763525571,58130.2283551589,62940.276963465,62109.4951199914,62714.8675186515,63377.0995397898,67307.9366531663,65996.5865045357,57163.9737098695,59796.3691966106,65071.4261266305,60087.1208906686,54893.9153523399,57987.867349257,61338.3514538535,58800.9076199314,61148.4684984676,57281.7702870652,55955.2765321744,120140.776289771,106923.594821131,89779.8931924119,83442.9422805277,84297.3568409132,85109.9797606309,86361.8924171182,80057.9329994474,79717.0832519988,79870.104528206,78363.7893196064,80448.4384545558,84704.1533347764,86798.6889038995,90642.0876425689,90117.0102688889,92953.3731918121,88814.4925487822,90694.7967561782,90342.2958447634,91370.7063983678,92264.2283155788,91040.7018092317,85975.4541149353,87745.0205463994,88542.2037480393,89064.611079601,90115.6955097102,601523.693127531,595776.72634263,613598.518533251,616798.394318608,638000.470335979,656298.717315296,678714.488508001,691195.367182711,696901.518588772,709600.924294885,733511.337261223,722935.012117626,726555.183452183,744831.88683637,745919.782435955,738718.60233443,730101.935176223,751661.271028039,735692.852072513,693597.90384527,702802.746934378,714078.510814236,717172.389555361,725371.842968683,722557.670559529,723096.017765438,706933.907647331,716092.013142115,728475.889658144,730244.943248134,5571.02632041962,6072.43875553366,6521.86809355297,6798.93144583693,7049.13393013146,6985.57880667843,7335.59302312201,7430.3298605577,7764.26635191912,172347.239688088,164722.197355732,157203.955238519,156329.521851339,159347.265855916,154763.378711308,148601.596742279,139029.962460234,149272.310792286,149299.899157948,145657.977465012,148734.467925549,149763.234583104,147727.535305402,148953.578003138,150776.58947296,145889.001728118,136853.377282082,139605.899313946,138068.888364819,134138.667419058,128691.889818678,126563.240250952,127972.207003802,129584.954481715,130460.077289458,128554.623720078,122638.506242094,1202060.54602784,1152179.82416095,1142845.26593059,1124864.86239123,1120555.24774434,1138786.1367442,1103880.94494761,1078775.6319311,1044927.44370999,1042612.08712455,1058745.05928286,1037234.57130344,1034137.57553172,1017525.74836855,992529.514621217,999354.674139974,973768.627241355,974780.346588238,908688.445455234,941805.335781226,917273.598894428,923342.02699829,940419.539218979,901255.144477455,904261.811453189,907967.905999177,892075.66710076,855890.412910832,809798.537282353,71097.6599934274,81729.4430637087,75740.1744706135,77874.6465046519,81785.9583924479,78838.2831024627,92007.5175572495,82562.0089135492,78535.8252660721,76048.6529794397,71748.1446290859,73469.7625244041,72887.1145417518,77956.0671649605,71987.693407411,67601.0741722018,75303.3961759929,70731.516127565,67137.4345702158,64331.3021687128,64664.108715712,59429.582384864,54837.6837385555,56560.8096621533,52332.1464874228,49737.6460694143,51764.3554262119,49648.8801740838,49621.2994881753,45812.179459855,290001.467422831,297748.420191866,307391.545380645,296709.525465194,313335.538902215,329350.689520078,321413.459609866,335792.94325891,345414.753039115,372592.112634737,388211.542962691,385643.065153497,403700.66962079,411524.813733842,427387.293965315,442075.010181938,435255.58444539,446328.117839581,412136.244666602,372318.718133169,357876.017784356,357588.454147166,350317.744469078,323525.943018132,325609.35926174,336994.883118601,325465.700537931,338738.170594031,333250.40725042,314528.510980398,71075.0144648247,68976.8335019182,67537.1671613365,69802.059728087,75330.9030260943,71663.0029860441,77655.5890899565,76353.4044179946,72656.1779262031,72039.2845398846,70162.5914691146,75489.9489808039,77917.810461647,85538.0706954333,81850.1262939211,69851.3808562471,81228.1814794622,79574.3610225326,71465.3713386673,67828.4119451963,75621.6317498596,67876.6341132193,62402.3100763527,62797.2691077513,58659.7581540208,55087.2773401857,58007.0030378331,55230.1806608954,56281.8198132545,53021.2465565849,794869.452235846,804232.674155572,783560.563939889,764121.935845061,754886.830951978,748483.635232655,770309.284658363,744640.423832767,742696.693733425,712883.459402444,711972.538935432,714597.25697387,694790.609767078,701372.644104804,697609.48516793,690112.270844571,683132.37325962,671465.499465677,650476.106810809,594416.682587364,608732.302173083,563659.977575084,580418.63938128,566545.826966851,526556.30012244,509050.717772049,484146.194849087,473389.975534263,466666.983317023,453101.45802976,103289.457178696,103344.245854441,104588.354102657,104188.433428032,106975.033417777,109310.876969186,112456.891725954,117357.197103652,122954.803901481,123112.81009285,126470.876460863,127524.658720443,127540.100962126,131279.631419172,131960.687760924,136423.686442407,132517.990674183,135149.005694812,131825.164273257,124619.085138415,118500.037686487,115571.725426355,112305.519418642,102684.378637701,99257.806176378,95463.9794722372,91821.8364386087,95600.9925177928,92308.3450833137,85630.943321565,22771.964935609,22721.9975134191,21818.7180475938,22487.3009877291,22994.8225912317,24398.9243448524,24509.4818173308,25824.043007964,25563.4570524748,26739.4426866974,27793.2602147408,29224.1363551862,29263.6399536718,29730.7236999549,30081.352662498,31485.7395131563,30506.1179030094,28151.1220717707,27752.9650811428,27429.5982319884,25612.6355108699,24330.5970820124,23475.5394416999,23911.9195759801,23999.9175624634,24737.5591073121,23536.2831298933,23605.0206025852,94786.9684026939,88314.6198239993,78141.7743276547,79352.6557595713,78422.0911555662,77193.2499122808,79547.5396253384,78006.7850629036,77397.3173221325,77819.9795936181,74916.7340461961,76856.8479339153,75137.6211286112,78042.7728622823,76960.8859457546,76717.5556328448,75506.6517574744,73725.5431160588,71584.0082015639,65402.8334791118,66056.5823161325,64354.1367949513,60957.5058025586,58068.1805736138,58407.7216399419,61516.669922448,62258.5904987339,64716.4161787486,64735.4007871851,64433.168212873,54400.3162456995,55210.2655921306,55196.5307869923,55739.9462384579,57215.0583231795,58740.8801811121,60904.7679304024,62361.1532825199,64942.4650174237,66202.8675332747,68458.7098699334,70487.2049694311,68623.0458342883,69032.7735879116,68384.5472258666,70264.3403112383,69620.584043203,68591.5682339947,68131.4571730702,62356.3744298982,61949.4142923412,57793.5835991878,58785.1361508092,58570.5832639813,58062.5677606555,60431.9530413558,62475.1373324772,62114.8608820183,62526.0139696782,59777.6396172161,1269015.30288078,1283386.63518544,1295604.14662256,1291284.86833838,1352190.74920431,1373757.62918085,1386211.80966199,1378930.07940314,1330542.77094985,1353959.95204875,1373754.86528205,1348108.69082713,1372028.54778409,1378772.4391761,1370202.42609118,1377912.87341269,1356610.44023733,1391882.92964472,1319257.63722621,1247100.64408536,1300451.71302843,1351251.65499419,1394043.99307743,1405888.60518791,1356588.53690717,1318516.69693598,1301855.89190239,1288528.71912481,1245020.88697712,1209493.35418548,30616.9237506683,24550.9291743322,23187.1367580252,22201.5959191446,23248.7810615024,22815.5633981537,23780.9964969377,20968.0700290156,19425.8412418122,20228.9529171615,20608.070415555,20776.2444679977,21593.7731949746,22700.1210622327,22990.5827315111,25170.9213611012,24192.3392482136,19902.2288171906,20742.3636442141,21338.6561092457,21261.460086629,20023.9958432571,19986.6928884761,20283.0349796088,20311.8317234934,20518.8766032769,20150.0991097013,20367.847537002,219604.101957849,227263.862660744,227948.361914389,228694.788377512,229571.519738175,229639.344927106,240424.692122665,232386.437027991,232779.112597159,219336.64465199,217577.763418426,218271.568229155,216093.443828745,216742.957588759,218288.462031947,212553.100082046,207510.087801018,205894.054282244,205315.854010135,199722.19465864,211675.15204759,197327.070115243,193081.482620275,193387.531543852,185617.270533367,192712.730465083,193101.018399183,190567.469714956,186394.472259371,180441.295041414,65129.2265153689,66005.3369746613,67153.4847659029,66913.4392999329,68135.3764640341,68913.1250160278,70973.4128004671,73669.1256222054,71569.2777435882,73366.3805105233,75397.6313836791,78386.3562408515,78563.4918111933,80733.6375232615,80548.784687966,80673.9976083313,80724.4358721256,78678.3617785243,80281.9992818682,80578.3088257204,82317.8757096254,475862.931721879,463790.867979625,451015.93995177,450911.259418228,445289.045721325,447309.062941919,461109.527678685,451022.730061129,420681.520002019,409182.564208224,396594.906005332,395187.645272089,385455.07393895,399258.84106792,404900.886889338,405225.247666903,420408.332354278,420268.917713595,413750.427508536,394713.89800911,413501.546936704,412488.954182128,404975.672054535,401638.242499534,388929.073849226,390815.883734896,400421.283822755,414819.409011347,411852.174023962,390744.667678314,58783.7747826449,60689.0373771176,64536.0410405003,63027.6440076516,63924.866756731,68588.1405163452,66294.6307157814,69473.4670083932,74333.266684444,82400.4444484228,81668.1053085541,81199.8802634505,85719.9430857501,80429.3297289088,83559.5591665948,85704.3373691091,80871.6709854669,78593.0068569892,76195.152532281,73008.6945452057,68727.0300152394,67319.0851025715,65404.6271649694,63542.2322350027,63439.8314479983,67586.6694395915,65741.5836051264,70790.7212400267,67131.7867899326,63469.9771880301,247371.774221401,204385.170497338,189482.017241338,179379.256952853,176654.996814269,183855.957937875,186702.299857351,179616.657527224,163514.283569987,145552.030498876,138766.955731042,142383.729429457,143913.341497851,149600.065610506,147819.498393177,146944.756308086,148442.789926945,145429.713360895,140785.556308033,121699.296886031,116143.753178736,123862.204119279,121086.328001662,111881.71802146,112485.912405957,113193.867136923,110762.205144427,114245.644445732,115090.958527098,111767.056256131,2519559.57809929,2382405.21564718,2120840.38034622,2068333.79865849,2017432.5803168,1899548.63522169,1867753.7036752,1897296.71087669,1891846.00974106,1926302.44736173,1903699.11048402,1936360.29211177,1947980.20979865,1965384.73764042,2024782.86008587,2022728.30877457,2057617.56116115,1921605.98271332,2013432.44573952,2070533.85595864,2095638.94327768,2037755.83302016,2037987.25985728,2035889.29831099,2037209.58152542,2071543.36647541,2133581.60281566,2119432.41411106,58212.7932130892,54796.0393237914,52323.026161451,52888.9423205117,52723.1126495376,52634.9942974482,51948.7710072105,50561.4196104115,48669.9109648561,50925.3926266288,49526.6986608667,49680.810297349,50409.4732084659,50357.1936890062,50267.5300492616,48477.9454908264,48898.5188466973,44706.1757947578,45363.928845525,44555.4658264419,42309.2210939343,41862.5644191107,39862.9904357891,40712.4612543273,41112.1242750914,42226.703210953,42159.1271512764,39948.3328775762,17219.634483761,17468.7603291726,17902.5834431746,18690.9854443807,19305.1336205441,19425.620576296,18805.7288769774,18581.7679757776,71239.1749535718,71495.9404367631,71032.9170184903,71336.9332483504,73852.0139698985,73185.3928094329,77151.1540594999,72137.8425737566,72588.0030515939,69504.5014088388,68149.0487953562,68963.1939332559,69684.735059852,70052.925673924,69487.5677872603,66662.5284519518,66281.6407472456,65164.4764837245,62788.9038317399,58523.6819120945,64557.4306574231,60230.6220444901,57376.4484781741,55718.9519680639,53833.2983316601,53998.5239484138,53571.5169699015,53010.5917127513,52170.2153502114,50919.864628547,219572.212756277,226956.771277369,233185.056989232,240521.138984693,234496.433255101,247993.714387582,267614.110763593,278866.028485024,280419.454163788,277840.878005734,298954.228800527,280503.234580198,286227.35308584,305290.154796122,314843.152369665,337344.645500626,358571.104608802,391664.260818859,387853.213521139,395843.888381973,399143.06169849,428120.385662412,447582.084942284,439694.382115648,458953.877797475,473335.823986507,498886.77870021,524980.914998479,522476.62831772,506080.418050804,801154.323355843,711031.746134755,604727.175550609,561925.721766646,515089.600804292,499401.614337013,480725.917450933,449424.96128236,427602.794017781,445700.836202421,430839.880678588,440133.92160103,442916.365994247,442062.649725455,459698.394163368,463029.998321036,450790.659030654,390310.522921734,407123.68850817,428395.169998566,417435.213821668,409042.060451572,362608.938695163,319141.185292977,337456.510663332,323045.056155298,339797.892371654,332114.021495402,6442650.62637219,6373621.13494242,6486343.83634698,6604349.88949542,6691822.82940406,6775860.24466713,6981165.37615633,7036508.03992706,7083269.26680469,7125399.0288809,7313616.49290178,7202956.51353286,7244301.8887553,7301363.1804132,7415471.10782934,7423031.03062713,7344462.84753025,7449616.02492602,7224648.98009879,6772000.07130494,6991106.34255402,6827402.42058838,6585907.76574669,6764669.10979369,6824956.70900332,6671112.06490354,6520337.83908879,6483291.33079663,6671449.4007746,6558345.17946513],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Motor Gasoline Production\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Greenhouse Gas Emissions\"}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Gas Oil/Diesel Oil Export\"}},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('2ead8e61-caf4-42d9-ac00-0541fe4467a6');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                            </script>        </div>\n</body>\n</html>"},"execution_count":30,"metadata":{},"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"658fc0","input":"df.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1290 entries, 0 to 1289\nData columns (total 17 columns):\n #   Column                         Non-Null Count  Dtype  \n---  ------                         --------------  -----  \n 0   Greenhouse Gas Emissions       1290 non-null   float64\n 1   Year                           1290 non-null   int64  \n 2   Hard Coal Production           451 non-null    float64\n 3   Natural Gas Production         747 non-null    float64\n 4   Crude Oil Production           724 non-null    float64\n 5   Motor Gasoline Production      879 non-null    float64\n 6   Gas Oil/Diesel Oil Production  879 non-null    float64\n 7   Hard Coal Import               1015 non-null   float64\n 8   Natural Gas Import             921 non-null    float64\n 9   Crude Oil Import               883 non-null    float64\n 10  Motor Gasoline Import          1050 non-null   float64\n 11  Gas Oil/Diesel Oil Import      1059 non-null   float64\n 12  Hard Coal Export               661 non-null    float64\n 13  Natural Gas Export             480 non-null    float64\n 14  Crude Oil Export               546 non-null    float64\n 15  Motor Gasoline Export          930 non-null    float64\n 16  Gas Oil/Diesel Oil Export      966 non-null    float64\ndtypes: float64(16), int64(1)\nmemory usage: 171.5 KB\n"}},"pos":8,"type":"cell"}
{"id":0,"time":1656689369680,"type":"user"}
{"last_load":1656689371052,"type":"file"}