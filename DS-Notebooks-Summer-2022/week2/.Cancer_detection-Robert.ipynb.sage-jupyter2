{"backend_state":"running","connection_file":"/projects/39b268b1-0e75-4ebd-9cf2-691243b37f4a/.local/share/jupyter/runtime/kernel-c1cc552e-bef7-4e15-98a5-c5c44733047c.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":[],"name":"Cancer_detection.ipynb","provenance":[]},"language_info":{"name":"python"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657040899382,"exec_count":2,"id":"37e211","input":"import pandas as pd\nimport numpy as np","kernel":"python3-ubuntu","metadata":{"id":"f0O0Zg5xvX1N"},"pos":2,"start":1657040899140,"state":"done","type":"cell"}
{"cell_type":"code","end":1657040901061,"exec_count":3,"id":"02d82c","input":"breast_cancer = pd.read_csv(\"https://raw.githubusercontent.com/pkmklong/Breast-Cancer-Wisconsin-Diagnostic-DataSet/master/data.csv\")","kernel":"python3-ubuntu","metadata":{"id":"BvK5i4DcvcTg"},"pos":3,"start":1657040901033,"state":"done","type":"cell"}
{"cell_type":"code","end":1657040970894,"exec_count":7,"id":"a6c31a","input":"# print the number of rows in breast_cancer\nlen(breast_cancer)","kernel":"python3-ubuntu","metadata":{"id":"LxELBWOdxsrl"},"output":{"0":{"data":{"text/plain":"569"},"exec_count":7}},"pos":7,"start":1657040970875,"state":"done","type":"cell"}
{"cell_type":"code","end":1657040982767,"exec_count":9,"id":"d851f1","input":"# print columns of breast_cancer\nbreast_cancer.columns","kernel":"python3-ubuntu","metadata":{"id":"qQ5KjWIMwGaP"},"output":{"0":{"data":{"text/plain":"Index(['id', 'diagnosis', 'radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst', 'Unnamed: 32'],\n      dtype='object')"},"exec_count":9}},"pos":6,"start":1657040982759,"state":"done","type":"cell"}
{"cell_type":"code","end":1657040990091,"exec_count":10,"id":"f5629f","input":"# print first five rows of breast_cancer\nbreast_cancer.head()","kernel":"python3-ubuntu","metadata":{"id":"B5QnmTysxcJT"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>diagnosis</th>\n      <th>radius_mean</th>\n      <th>texture_mean</th>\n      <th>perimeter_mean</th>\n      <th>area_mean</th>\n      <th>smoothness_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>...</th>\n      <th>texture_worst</th>\n      <th>perimeter_worst</th>\n      <th>area_worst</th>\n      <th>smoothness_worst</th>\n      <th>compactness_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n      <th>symmetry_worst</th>\n      <th>fractal_dimension_worst</th>\n      <th>Unnamed: 32</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>842302</td>\n      <td>M</td>\n      <td>17.99</td>\n      <td>10.38</td>\n      <td>122.80</td>\n      <td>1001.0</td>\n      <td>0.11840</td>\n      <td>0.27760</td>\n      <td>0.3001</td>\n      <td>0.14710</td>\n      <td>...</td>\n      <td>17.33</td>\n      <td>184.60</td>\n      <td>2019.0</td>\n      <td>0.1622</td>\n      <td>0.6656</td>\n      <td>0.7119</td>\n      <td>0.2654</td>\n      <td>0.4601</td>\n      <td>0.11890</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>842517</td>\n      <td>M</td>\n      <td>20.57</td>\n      <td>17.77</td>\n      <td>132.90</td>\n      <td>1326.0</td>\n      <td>0.08474</td>\n      <td>0.07864</td>\n      <td>0.0869</td>\n      <td>0.07017</td>\n      <td>...</td>\n      <td>23.41</td>\n      <td>158.80</td>\n      <td>1956.0</td>\n      <td>0.1238</td>\n      <td>0.1866</td>\n      <td>0.2416</td>\n      <td>0.1860</td>\n      <td>0.2750</td>\n      <td>0.08902</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>84300903</td>\n      <td>M</td>\n      <td>19.69</td>\n      <td>21.25</td>\n      <td>130.00</td>\n      <td>1203.0</td>\n      <td>0.10960</td>\n      <td>0.15990</td>\n      <td>0.1974</td>\n      <td>0.12790</td>\n      <td>...</td>\n      <td>25.53</td>\n      <td>152.50</td>\n      <td>1709.0</td>\n      <td>0.1444</td>\n      <td>0.4245</td>\n      <td>0.4504</td>\n      <td>0.2430</td>\n      <td>0.3613</td>\n      <td>0.08758</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>84348301</td>\n      <td>M</td>\n      <td>11.42</td>\n      <td>20.38</td>\n      <td>77.58</td>\n      <td>386.1</td>\n      <td>0.14250</td>\n      <td>0.28390</td>\n      <td>0.2414</td>\n      <td>0.10520</td>\n      <td>...</td>\n      <td>26.50</td>\n      <td>98.87</td>\n      <td>567.7</td>\n      <td>0.2098</td>\n      <td>0.8663</td>\n      <td>0.6869</td>\n      <td>0.2575</td>\n      <td>0.6638</td>\n      <td>0.17300</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>84358402</td>\n      <td>M</td>\n      <td>20.29</td>\n      <td>14.34</td>\n      <td>135.10</td>\n      <td>1297.0</td>\n      <td>0.10030</td>\n      <td>0.13280</td>\n      <td>0.1980</td>\n      <td>0.10430</td>\n      <td>...</td>\n      <td>16.67</td>\n      <td>152.20</td>\n      <td>1575.0</td>\n      <td>0.1374</td>\n      <td>0.2050</td>\n      <td>0.4000</td>\n      <td>0.1625</td>\n      <td>0.2364</td>\n      <td>0.07678</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 33 columns</p>\n</div>","text/plain":"         id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n0    842302         M        17.99         10.38          122.80     1001.0   \n1    842517         M        20.57         17.77          132.90     1326.0   \n2  84300903         M        19.69         21.25          130.00     1203.0   \n3  84348301         M        11.42         20.38           77.58      386.1   \n4  84358402         M        20.29         14.34          135.10     1297.0   \n\n   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n0          0.11840           0.27760          0.3001              0.14710   \n1          0.08474           0.07864          0.0869              0.07017   \n2          0.10960           0.15990          0.1974              0.12790   \n3          0.14250           0.28390          0.2414              0.10520   \n4          0.10030           0.13280          0.1980              0.10430   \n\n   ...  texture_worst  perimeter_worst  area_worst  smoothness_worst  \\\n0  ...          17.33           184.60      2019.0            0.1622   \n1  ...          23.41           158.80      1956.0            0.1238   \n2  ...          25.53           152.50      1709.0            0.1444   \n3  ...          26.50            98.87       567.7            0.2098   \n4  ...          16.67           152.20      1575.0            0.1374   \n\n   compactness_worst  concavity_worst  concave points_worst  symmetry_worst  \\\n0             0.6656           0.7119                0.2654          0.4601   \n1             0.1866           0.2416                0.1860          0.2750   \n2             0.4245           0.4504                0.2430          0.3613   \n3             0.8663           0.6869                0.2575          0.6638   \n4             0.2050           0.4000                0.1625          0.2364   \n\n   fractal_dimension_worst  Unnamed: 32  \n0                  0.11890          NaN  \n1                  0.08902          NaN  \n2                  0.08758          NaN  \n3                  0.17300          NaN  \n4                  0.07678          NaN  \n\n[5 rows x 33 columns]"},"exec_count":10}},"pos":5,"start":1657040990063,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041163910,"exec_count":13,"id":"b273de","input":"# explore anything else you are interested in here\nsum_m = len(breast_cancer[breast_cancer[\"diagnosis\"]==\"M\"])\nsum_b = len(breast_cancer[breast_cancer[\"diagnosis\"]==\"B\"])\nprint(sum_m)\nprint(sum_b)","kernel":"python3-ubuntu","metadata":{"id":"lFnrZickyynD"},"output":{"0":{"name":"stdout","text":"212\n357\n"}},"pos":8,"start":1657041163898,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041295323,"exec_count":15,"id":"5b6430","input":"# use df.drop to drop Unnamed: 32 and ID, as well as any columns you don't think we should keep track of.\ncols_to_drop = [\"id\",\"Unnamed: 32\"]\nbreast_cancer.drop(cols_to_drop, axis=1, inplace=True)\n","kernel":"python3-ubuntu","metadata":{"id":"GsTMmM8EzBJ9"},"pos":13,"start":1657041295319,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041331045,"exec_count":17,"id":"1a5e69","input":"# drop any n/a values remaining! Remember inplace!\nbreast_cancer.dropna(inplace=True)","kernel":"python3-ubuntu","metadata":{"id":"H7H0OTAhzoKQ"},"pos":14,"start":1657041331040,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041333708,"exec_count":18,"id":"c3ada2","input":"# print the last five rows of your dataframe \nbreast_cancer.tail()","kernel":"python3-ubuntu","metadata":{"id":"tL-d7BNRzz_V"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>diagnosis</th>\n      <th>radius_mean</th>\n      <th>texture_mean</th>\n      <th>perimeter_mean</th>\n      <th>area_mean</th>\n      <th>smoothness_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>symmetry_mean</th>\n      <th>...</th>\n      <th>radius_worst</th>\n      <th>texture_worst</th>\n      <th>perimeter_worst</th>\n      <th>area_worst</th>\n      <th>smoothness_worst</th>\n      <th>compactness_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n      <th>symmetry_worst</th>\n      <th>fractal_dimension_worst</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>564</th>\n      <td>M</td>\n      <td>21.56</td>\n      <td>22.39</td>\n      <td>142.00</td>\n      <td>1479.0</td>\n      <td>0.11100</td>\n      <td>0.11590</td>\n      <td>0.24390</td>\n      <td>0.13890</td>\n      <td>0.1726</td>\n      <td>...</td>\n      <td>25.450</td>\n      <td>26.40</td>\n      <td>166.10</td>\n      <td>2027.0</td>\n      <td>0.14100</td>\n      <td>0.21130</td>\n      <td>0.4107</td>\n      <td>0.2216</td>\n      <td>0.2060</td>\n      <td>0.07115</td>\n    </tr>\n    <tr>\n      <th>565</th>\n      <td>M</td>\n      <td>20.13</td>\n      <td>28.25</td>\n      <td>131.20</td>\n      <td>1261.0</td>\n      <td>0.09780</td>\n      <td>0.10340</td>\n      <td>0.14400</td>\n      <td>0.09791</td>\n      <td>0.1752</td>\n      <td>...</td>\n      <td>23.690</td>\n      <td>38.25</td>\n      <td>155.00</td>\n      <td>1731.0</td>\n      <td>0.11660</td>\n      <td>0.19220</td>\n      <td>0.3215</td>\n      <td>0.1628</td>\n      <td>0.2572</td>\n      <td>0.06637</td>\n    </tr>\n    <tr>\n      <th>566</th>\n      <td>M</td>\n      <td>16.60</td>\n      <td>28.08</td>\n      <td>108.30</td>\n      <td>858.1</td>\n      <td>0.08455</td>\n      <td>0.10230</td>\n      <td>0.09251</td>\n      <td>0.05302</td>\n      <td>0.1590</td>\n      <td>...</td>\n      <td>18.980</td>\n      <td>34.12</td>\n      <td>126.70</td>\n      <td>1124.0</td>\n      <td>0.11390</td>\n      <td>0.30940</td>\n      <td>0.3403</td>\n      <td>0.1418</td>\n      <td>0.2218</td>\n      <td>0.07820</td>\n    </tr>\n    <tr>\n      <th>567</th>\n      <td>M</td>\n      <td>20.60</td>\n      <td>29.33</td>\n      <td>140.10</td>\n      <td>1265.0</td>\n      <td>0.11780</td>\n      <td>0.27700</td>\n      <td>0.35140</td>\n      <td>0.15200</td>\n      <td>0.2397</td>\n      <td>...</td>\n      <td>25.740</td>\n      <td>39.42</td>\n      <td>184.60</td>\n      <td>1821.0</td>\n      <td>0.16500</td>\n      <td>0.86810</td>\n      <td>0.9387</td>\n      <td>0.2650</td>\n      <td>0.4087</td>\n      <td>0.12400</td>\n    </tr>\n    <tr>\n      <th>568</th>\n      <td>B</td>\n      <td>7.76</td>\n      <td>24.54</td>\n      <td>47.92</td>\n      <td>181.0</td>\n      <td>0.05263</td>\n      <td>0.04362</td>\n      <td>0.00000</td>\n      <td>0.00000</td>\n      <td>0.1587</td>\n      <td>...</td>\n      <td>9.456</td>\n      <td>30.37</td>\n      <td>59.16</td>\n      <td>268.6</td>\n      <td>0.08996</td>\n      <td>0.06444</td>\n      <td>0.0000</td>\n      <td>0.0000</td>\n      <td>0.2871</td>\n      <td>0.07039</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 31 columns</p>\n</div>","text/plain":"    diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n564         M        21.56         22.39          142.00     1479.0   \n565         M        20.13         28.25          131.20     1261.0   \n566         M        16.60         28.08          108.30      858.1   \n567         M        20.60         29.33          140.10     1265.0   \n568         B         7.76         24.54           47.92      181.0   \n\n     smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n564          0.11100           0.11590         0.24390              0.13890   \n565          0.09780           0.10340         0.14400              0.09791   \n566          0.08455           0.10230         0.09251              0.05302   \n567          0.11780           0.27700         0.35140              0.15200   \n568          0.05263           0.04362         0.00000              0.00000   \n\n     symmetry_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n564         0.1726  ...        25.450          26.40           166.10   \n565         0.1752  ...        23.690          38.25           155.00   \n566         0.1590  ...        18.980          34.12           126.70   \n567         0.2397  ...        25.740          39.42           184.60   \n568         0.1587  ...         9.456          30.37            59.16   \n\n     area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n564      2027.0           0.14100            0.21130           0.4107   \n565      1731.0           0.11660            0.19220           0.3215   \n566      1124.0           0.11390            0.30940           0.3403   \n567      1821.0           0.16500            0.86810           0.9387   \n568       268.6           0.08996            0.06444           0.0000   \n\n     concave points_worst  symmetry_worst  fractal_dimension_worst  \n564                0.2216          0.2060                  0.07115  \n565                0.1628          0.2572                  0.06637  \n566                0.1418          0.2218                  0.07820  \n567                0.2650          0.4087                  0.12400  \n568                0.0000          0.2871                  0.07039  \n\n[5 rows x 31 columns]"},"exec_count":18}},"pos":15,"start":1657041333694,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041365580,"exec_count":19,"id":"70c9c9","input":"# Run breast_cancer.info()\nbreast_cancer.info()","kernel":"python3-ubuntu","metadata":{"id":"gAPOpEtcz7U2"},"output":{"0":{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 569 entries, 0 to 568\nData columns (total 31 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   diagnosis                569 non-null    object \n 1   radius_mean              569 non-null    float64\n 2   texture_mean             569 non-null    float64\n 3   perimeter_mean           569 non-null    float64\n 4   area_mean                569 non-null    float64\n 5   smoothness_mean          569 non-null    float64\n 6   compactness_mean         569 non-null    float64\n 7   concavity_mean           569 non-null    float64\n 8   concave points_mean      569 non-null    float64\n 9   symmetry_mean            569 non-null    float64\n 10  fractal_dimension_mean   569 non-null    float64\n 11  radius_se                569 non-null    float64\n 12  texture_se               569 non-null    float64\n 13  perimeter_se             569 non-null    float64\n 14  area_se                  569 non-null    float64\n 15  smoothness_se            569 non-null    float64\n 16  compactness_se           569 non-null    float64\n 17  concavity_se             569 non-null    float64\n 18  concave points_se        569 non-null    float64\n 19  symmetry_se              569 non-null    float64\n 20  fractal_dimension_se     569 non-null    float64\n 21  radius_worst             569 non-null    float64\n 22  texture_worst            569 non-null    float64\n 23  perimeter_worst          569 non-null    float64\n 24  area_worst               569 non-null    float64\n 25  smoothness_worst         569 non-null    float64\n 26  compactness_worst        569 non-null    float64\n 27  concavity_worst          569 non-null    float64\n 28  concave points_worst     569 non-null    float64\n 29  symmetry_worst           569 non-null    float64\n 30  fractal_dimension_worst  569 non-null    float64\ndtypes: float64(30), object(1)\nmemory usage: 137.9+ KB\n"}},"pos":17,"start":1657041365561,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041393498,"exec_count":20,"id":"07dfb9","input":"dummies = pd.get_dummies(breast_cancer[\"diagnosis\"])\ndummies.head()","kernel":"python3-ubuntu","metadata":{"id":"k2w_QD0e3-WY"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>B</th>\n      <th>M</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   B  M\n0  0  1\n1  0  1\n2  0  1\n3  0  1\n4  0  1"},"exec_count":20}},"pos":19,"start":1657041393488,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041419384,"exec_count":21,"id":"f83dc4","input":"breast_cancer[\"outcome\"] = dummies[\"M\"]\nbreast_cancer.head()","kernel":"python3-ubuntu","metadata":{"id":"QtT1BaBF5M3V"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>diagnosis</th>\n      <th>radius_mean</th>\n      <th>texture_mean</th>\n      <th>perimeter_mean</th>\n      <th>area_mean</th>\n      <th>smoothness_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>symmetry_mean</th>\n      <th>...</th>\n      <th>texture_worst</th>\n      <th>perimeter_worst</th>\n      <th>area_worst</th>\n      <th>smoothness_worst</th>\n      <th>compactness_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n      <th>symmetry_worst</th>\n      <th>fractal_dimension_worst</th>\n      <th>outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>M</td>\n      <td>17.99</td>\n      <td>10.38</td>\n      <td>122.80</td>\n      <td>1001.0</td>\n      <td>0.11840</td>\n      <td>0.27760</td>\n      <td>0.3001</td>\n      <td>0.14710</td>\n      <td>0.2419</td>\n      <td>...</td>\n      <td>17.33</td>\n      <td>184.60</td>\n      <td>2019.0</td>\n      <td>0.1622</td>\n      <td>0.6656</td>\n      <td>0.7119</td>\n      <td>0.2654</td>\n      <td>0.4601</td>\n      <td>0.11890</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M</td>\n      <td>20.57</td>\n      <td>17.77</td>\n      <td>132.90</td>\n      <td>1326.0</td>\n      <td>0.08474</td>\n      <td>0.07864</td>\n      <td>0.0869</td>\n      <td>0.07017</td>\n      <td>0.1812</td>\n      <td>...</td>\n      <td>23.41</td>\n      <td>158.80</td>\n      <td>1956.0</td>\n      <td>0.1238</td>\n      <td>0.1866</td>\n      <td>0.2416</td>\n      <td>0.1860</td>\n      <td>0.2750</td>\n      <td>0.08902</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>M</td>\n      <td>19.69</td>\n      <td>21.25</td>\n      <td>130.00</td>\n      <td>1203.0</td>\n      <td>0.10960</td>\n      <td>0.15990</td>\n      <td>0.1974</td>\n      <td>0.12790</td>\n      <td>0.2069</td>\n      <td>...</td>\n      <td>25.53</td>\n      <td>152.50</td>\n      <td>1709.0</td>\n      <td>0.1444</td>\n      <td>0.4245</td>\n      <td>0.4504</td>\n      <td>0.2430</td>\n      <td>0.3613</td>\n      <td>0.08758</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>M</td>\n      <td>11.42</td>\n      <td>20.38</td>\n      <td>77.58</td>\n      <td>386.1</td>\n      <td>0.14250</td>\n      <td>0.28390</td>\n      <td>0.2414</td>\n      <td>0.10520</td>\n      <td>0.2597</td>\n      <td>...</td>\n      <td>26.50</td>\n      <td>98.87</td>\n      <td>567.7</td>\n      <td>0.2098</td>\n      <td>0.8663</td>\n      <td>0.6869</td>\n      <td>0.2575</td>\n      <td>0.6638</td>\n      <td>0.17300</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>M</td>\n      <td>20.29</td>\n      <td>14.34</td>\n      <td>135.10</td>\n      <td>1297.0</td>\n      <td>0.10030</td>\n      <td>0.13280</td>\n      <td>0.1980</td>\n      <td>0.10430</td>\n      <td>0.1809</td>\n      <td>...</td>\n      <td>16.67</td>\n      <td>152.20</td>\n      <td>1575.0</td>\n      <td>0.1374</td>\n      <td>0.2050</td>\n      <td>0.4000</td>\n      <td>0.1625</td>\n      <td>0.2364</td>\n      <td>0.07678</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 32 columns</p>\n</div>","text/plain":"  diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n0         M        17.99         10.38          122.80     1001.0   \n1         M        20.57         17.77          132.90     1326.0   \n2         M        19.69         21.25          130.00     1203.0   \n3         M        11.42         20.38           77.58      386.1   \n4         M        20.29         14.34          135.10     1297.0   \n\n   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n0          0.11840           0.27760          0.3001              0.14710   \n1          0.08474           0.07864          0.0869              0.07017   \n2          0.10960           0.15990          0.1974              0.12790   \n3          0.14250           0.28390          0.2414              0.10520   \n4          0.10030           0.13280          0.1980              0.10430   \n\n   symmetry_mean  ...  texture_worst  perimeter_worst  area_worst  \\\n0         0.2419  ...          17.33           184.60      2019.0   \n1         0.1812  ...          23.41           158.80      1956.0   \n2         0.2069  ...          25.53           152.50      1709.0   \n3         0.2597  ...          26.50            98.87       567.7   \n4         0.1809  ...          16.67           152.20      1575.0   \n\n   smoothness_worst  compactness_worst  concavity_worst  concave points_worst  \\\n0            0.1622             0.6656           0.7119                0.2654   \n1            0.1238             0.1866           0.2416                0.1860   \n2            0.1444             0.4245           0.4504                0.2430   \n3            0.2098             0.8663           0.6869                0.2575   \n4            0.1374             0.2050           0.4000                0.1625   \n\n   symmetry_worst  fractal_dimension_worst  outcome  \n0          0.4601                  0.11890        1  \n1          0.2750                  0.08902        1  \n2          0.3613                  0.08758        1  \n3          0.6638                  0.17300        1  \n4          0.2364                  0.07678        1  \n\n[5 rows x 32 columns]"},"exec_count":21}},"pos":21,"start":1657041419354,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041474168,"exec_count":22,"id":"90df50","input":"#Drop the 'diagnosis' column from your dataframe. Remember to use inplace if you are changing the dataframe itself!\nbreast_cancer.drop(\"diagnosis\", axis=1, inplace=True)\nbreast_cancer.head()","kernel":"python3-ubuntu","metadata":{"id":"_e-rGtPu5VIL"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>radius_mean</th>\n      <th>texture_mean</th>\n      <th>perimeter_mean</th>\n      <th>area_mean</th>\n      <th>smoothness_mean</th>\n      <th>compactness_mean</th>\n      <th>concavity_mean</th>\n      <th>concave points_mean</th>\n      <th>symmetry_mean</th>\n      <th>fractal_dimension_mean</th>\n      <th>...</th>\n      <th>texture_worst</th>\n      <th>perimeter_worst</th>\n      <th>area_worst</th>\n      <th>smoothness_worst</th>\n      <th>compactness_worst</th>\n      <th>concavity_worst</th>\n      <th>concave points_worst</th>\n      <th>symmetry_worst</th>\n      <th>fractal_dimension_worst</th>\n      <th>outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>17.99</td>\n      <td>10.38</td>\n      <td>122.80</td>\n      <td>1001.0</td>\n      <td>0.11840</td>\n      <td>0.27760</td>\n      <td>0.3001</td>\n      <td>0.14710</td>\n      <td>0.2419</td>\n      <td>0.07871</td>\n      <td>...</td>\n      <td>17.33</td>\n      <td>184.60</td>\n      <td>2019.0</td>\n      <td>0.1622</td>\n      <td>0.6656</td>\n      <td>0.7119</td>\n      <td>0.2654</td>\n      <td>0.4601</td>\n      <td>0.11890</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20.57</td>\n      <td>17.77</td>\n      <td>132.90</td>\n      <td>1326.0</td>\n      <td>0.08474</td>\n      <td>0.07864</td>\n      <td>0.0869</td>\n      <td>0.07017</td>\n      <td>0.1812</td>\n      <td>0.05667</td>\n      <td>...</td>\n      <td>23.41</td>\n      <td>158.80</td>\n      <td>1956.0</td>\n      <td>0.1238</td>\n      <td>0.1866</td>\n      <td>0.2416</td>\n      <td>0.1860</td>\n      <td>0.2750</td>\n      <td>0.08902</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>19.69</td>\n      <td>21.25</td>\n      <td>130.00</td>\n      <td>1203.0</td>\n      <td>0.10960</td>\n      <td>0.15990</td>\n      <td>0.1974</td>\n      <td>0.12790</td>\n      <td>0.2069</td>\n      <td>0.05999</td>\n      <td>...</td>\n      <td>25.53</td>\n      <td>152.50</td>\n      <td>1709.0</td>\n      <td>0.1444</td>\n      <td>0.4245</td>\n      <td>0.4504</td>\n      <td>0.2430</td>\n      <td>0.3613</td>\n      <td>0.08758</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>11.42</td>\n      <td>20.38</td>\n      <td>77.58</td>\n      <td>386.1</td>\n      <td>0.14250</td>\n      <td>0.28390</td>\n      <td>0.2414</td>\n      <td>0.10520</td>\n      <td>0.2597</td>\n      <td>0.09744</td>\n      <td>...</td>\n      <td>26.50</td>\n      <td>98.87</td>\n      <td>567.7</td>\n      <td>0.2098</td>\n      <td>0.8663</td>\n      <td>0.6869</td>\n      <td>0.2575</td>\n      <td>0.6638</td>\n      <td>0.17300</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>20.29</td>\n      <td>14.34</td>\n      <td>135.10</td>\n      <td>1297.0</td>\n      <td>0.10030</td>\n      <td>0.13280</td>\n      <td>0.1980</td>\n      <td>0.10430</td>\n      <td>0.1809</td>\n      <td>0.05883</td>\n      <td>...</td>\n      <td>16.67</td>\n      <td>152.20</td>\n      <td>1575.0</td>\n      <td>0.1374</td>\n      <td>0.2050</td>\n      <td>0.4000</td>\n      <td>0.1625</td>\n      <td>0.2364</td>\n      <td>0.07678</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 31 columns</p>\n</div>","text/plain":"   radius_mean  texture_mean  perimeter_mean  area_mean  smoothness_mean  \\\n0        17.99         10.38          122.80     1001.0          0.11840   \n1        20.57         17.77          132.90     1326.0          0.08474   \n2        19.69         21.25          130.00     1203.0          0.10960   \n3        11.42         20.38           77.58      386.1          0.14250   \n4        20.29         14.34          135.10     1297.0          0.10030   \n\n   compactness_mean  concavity_mean  concave points_mean  symmetry_mean  \\\n0           0.27760          0.3001              0.14710         0.2419   \n1           0.07864          0.0869              0.07017         0.1812   \n2           0.15990          0.1974              0.12790         0.2069   \n3           0.28390          0.2414              0.10520         0.2597   \n4           0.13280          0.1980              0.10430         0.1809   \n\n   fractal_dimension_mean  ...  texture_worst  perimeter_worst  area_worst  \\\n0                 0.07871  ...          17.33           184.60      2019.0   \n1                 0.05667  ...          23.41           158.80      1956.0   \n2                 0.05999  ...          25.53           152.50      1709.0   \n3                 0.09744  ...          26.50            98.87       567.7   \n4                 0.05883  ...          16.67           152.20      1575.0   \n\n   smoothness_worst  compactness_worst  concavity_worst  concave points_worst  \\\n0            0.1622             0.6656           0.7119                0.2654   \n1            0.1238             0.1866           0.2416                0.1860   \n2            0.1444             0.4245           0.4504                0.2430   \n3            0.2098             0.8663           0.6869                0.2575   \n4            0.1374             0.2050           0.4000                0.1625   \n\n   symmetry_worst  fractal_dimension_worst  outcome  \n0          0.4601                  0.11890        1  \n1          0.2750                  0.08902        1  \n2          0.3613                  0.08758        1  \n3          0.6638                  0.17300        1  \n4          0.2364                  0.07678        1  \n\n[5 rows x 31 columns]"},"exec_count":22}},"pos":23,"start":1657041474138,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041582007,"exec_count":27,"id":"0c533d","input":"# Create a variable named target and set it equal to the [\"outcome\"] column in our breast_cancer dataframe.\ntarget=breast_cancer[\"outcome\"]","kernel":"python3-ubuntu","metadata":{"id":"tZOfTkVx8w2K"},"pos":29,"start":1657041581990,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041583077,"exec_count":28,"id":"d52876","input":"# Create a variable named input_columns and set it equal to breast_cancer.loc[:, breast_cancer.columns != \"outcome\"]. This means our inputs are every single column except for column!\ninput_columns = breast_cancer.loc[:, breast_cancer.columns != \"outcome\"]","kernel":"python3-ubuntu","metadata":{"id":"X6wHkQax9chF"},"pos":30,"start":1657041583069,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041583956,"exec_count":29,"id":"00edbf","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.8)","kernel":"python3-ubuntu","metadata":{"id":"9I03IMDT8tdn"},"pos":32,"start":1657041583938,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041591208,"exec_count":30,"id":"302a1e","input":"#hint: start with x_train.shape\nx_train.shape","kernel":"python3-ubuntu","metadata":{"id":"Ok87vW5k-GTS"},"output":{"0":{"data":{"text/plain":"(113, 30)"},"exec_count":30}},"pos":34,"start":1657041591193,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041636788,"exec_count":31,"id":"7dc093","input":"import sklearn #our favorite machine learning library\nfrom sklearn.neighbors import KNeighborsClassifier as KNN #this will import our model as KNN","kernel":"python3-ubuntu","metadata":{"id":"RDDyWqva92IH"},"pos":38,"start":1657041636638,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041638917,"exec_count":32,"id":"1fb5fc","input":"# Creating the KNN model object -- we need to tell it the number of neighbors to look at.\nk = 7 #number of neighbors to look at (look at 7 nearest neighbors)\nmy_KNN_model = KNN(n_neighbors=k)","kernel":"python3-ubuntu","metadata":{"id":"GzCrGDYI-4FR"},"pos":40,"start":1657041638911,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041645198,"exec_count":33,"id":"b48af9","input":"my_KNN_model.fit(x_train, y_train) #train the model on our past results x_train (inputs) and y_train (outputs)","kernel":"python3-ubuntu","metadata":{"id":"VseIx97TSHQP"},"output":{"0":{"data":{"text/plain":"KNeighborsClassifier(n_neighbors=7)"},"exec_count":33}},"pos":42,"start":1657041645179,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041652782,"exec_count":34,"id":"5cf7cb","input":"#make some predictions based on your testing inputs (x_test) using the predict() function\ny_hat = my_KNN_model.predict(x_test)","kernel":"python3-ubuntu","metadata":{"id":"CVBaqGOIiEfP"},"pos":44,"start":1657041652749,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041655062,"exec_count":35,"id":"c03ea1","input":"y_hat #these are our predictions for our x_test inputs. ","kernel":"python3-ubuntu","metadata":{"id":"T-ifi-bGj7fx"},"output":{"0":{"data":{"text/plain":"array([0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,\n       0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1,\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1,\n       1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0,\n       0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,\n       0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n       0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0,\n       0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,\n       1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1,\n       0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n       0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,\n       1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,\n       0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1,\n       1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,\n       0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n       0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,\n       0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n       1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0], dtype=uint8)"},"exec_count":35}},"pos":45,"start":1657041655054,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041673579,"exec_count":37,"id":"58b7cb","input":"np.array(y_test) #these are what actually happened for our x_test inputs. Do you see some differences?","kernel":"python3-ubuntu","metadata":{"id":"TjLu8V3bj8_F"},"output":{"0":{"data":{"text/plain":"array([0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,\n       1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1,\n       0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1,\n       1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0,\n       0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0,\n       0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n       0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1,\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0,\n       0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0,\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,\n       1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1,\n       0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0,\n       0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1,\n       0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,\n       1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,\n       0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1,\n       1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1,\n       0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n       0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0,\n       0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n       1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0], dtype=uint8)"},"exec_count":37}},"pos":46,"start":1657041673429,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041682038,"exec_count":38,"id":"3ee0c2","input":"total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"python3-ubuntu","metadata":{"id":"eLFffHy1kFBh"},"output":{"0":{"name":"stdout","text":"0.10087719298245613\n"}},"pos":48,"start":1657041682017,"state":"done","type":"cell"}
{"cell_type":"code","end":1657041836596,"exec_count":43,"id":"7e29bc","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","metadata":{"id":"WCZLL1wZnfTn"},"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f2ed4a5b8e0>"},"exec_count":43},"1":{"data":{"image/png":"bda953050448b1965aa7aa5a2beb1a679ce2d656","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":411,"width":645},"needs_background":"light"}}},"pos":50,"start":1657041836149,"state":"done","type":"cell"}
{"cell_type":"code","end":1657042091635,"exec_count":45,"id":"5a4a0b","input":"from sklearn.svm import SVC\n#Create your model object -- you can go back and change the kernel argument after evaluating your data.","kernel":"python3-ubuntu","metadata":{"id":"LW9bLcghmT5d"},"pos":54,"start":1657042091631,"state":"done","type":"cell"}
{"cell_type":"code","end":1657042116884,"exec_count":47,"id":"540dee","input":"#fit your model\nmy_SVC_model = SVC()\nmy_SVC_model.fit(x_train, y_train)\ny_hat = my_SVC_model.predict(x_test)\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","metadata":{"id":"cu2cA4YBqrNL"},"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f2ed4965ac0>"},"exec_count":47},"1":{"data":{"image/png":"ca55cf285e30e80d183ccee35c363e0ad8b44d84","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":411,"width":645},"needs_background":"light"}}},"pos":56,"start":1657042116468,"state":"done","type":"cell"}
{"cell_type":"code","end":1657044013985,"exec_count":56,"id":"ccdc3d","input":"#have fun!\nfrom sklearn.ensemble import RandomForestClassifier\nmy_RFC_model = RandomForestClassifier(n_estimators=1)\nmy_RFC_model.fit(x_train, y_train)\ny_hat = my_RFC_model.predict(x_test)\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"python3-ubuntu","metadata":{"id":"CC0NmaY7v7_K"},"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f2ed19c1ac0>"},"exec_count":56},"1":{"data":{"image/png":"7ac7514b9a8d96d9e4965d8b9a8bd973bc60ca7a","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":411,"width":645},"needs_background":"light"}}},"pos":65,"start":1657044013082,"state":"done","type":"cell"}
{"cell_type":"code","id":"047cee","input":"# Figure out how many rows are malignant and how many are benign. Hint: use the .count() function!\n","metadata":{"id":"0tYK-EaL0g8y"},"pos":10,"state":"done","type":"cell"}
{"cell_type":"code","id":"188e8d","input":"# Visualization 1 here\n","metadata":{"id":"zAXnnF9f1Mp-"},"pos":26,"state":"done","type":"cell"}
{"cell_type":"code","id":"651d0d","input":"#Create a confusion matrix\n","metadata":{"id":"Xlm2k_-otFgI"},"pos":62,"state":"done","type":"cell"}
{"cell_type":"code","id":"7c4da6","input":"#create some predictions on your testing inputs and set them equal to y_hat.\n","metadata":{"id":"Hkrx7foxsuNZ"},"pos":58,"state":"done","type":"cell"}
{"cell_type":"code","id":"a19b37","input":"import plotly.express as px\nimport numpy\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"id":"QtEadcGS3sP3"},"pos":25,"state":"done","type":"cell"}
{"cell_type":"code","id":"bee04d","input":"#Compute your MSE.\n","metadata":{"id":"zz8OFQxFs8N0"},"pos":60,"state":"done","type":"cell"}
{"cell_type":"code","id":"d6b9f5","input":"# Visualization 2 here\n","metadata":{"id":"oQXBTNye681E"},"pos":27,"state":"done","type":"cell"}
{"cell_type":"code","id":"f97596","input":"#print outputs\n","metadata":{"id":"4wMcDBPW9n3C"},"pos":36,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"00775d","input":"Step 2 - Evaluation: Here we want to compare `y_hat` to `y_test`. Discuss with your team about why we should do this. \n\nOne we we can compare them is visual inspection. With that said, would you recommend going through by hand and making a tally for every time the one's and zero's don't match up?\n\nPlease don't do this. Please save yourself this nasty headache when we can just do math. Below is a common way to do this, called mean squared error. \n\nTo get mean squared error, we compute the difference between each element in `y_hat` and `y_test` and square it and then get the average of all of that to see how far off we are.","metadata":{"id":"SbywAxezkRN8"},"pos":47,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"018f59","input":"### Want more?\n\nThere are dozens of models available on SKLearn: https://scikit-learn.org/stable/supervised_learning.html.\n\nYou can try an implement your own below, I recommend starting with logistic regression or random forests :) ","metadata":{"id":"hd9Jqq18wFkd"},"pos":64,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"09b22c","input":"### Splitting the Data\n\nFor every single supervised machine learning problem, we will follow the same flow with `sklearn`:\n\n> *Split, Fit, Predict, and Evaluate.*\n\nWhat is first? Splitting our data into training and testing sets. You can watch a video on why we do that [in the first 36 seconds of this video](https://www.youtube.com/watch?v=_vdMKioCXqQ). \n\nWe will split our data using the [`train_test_split()`](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html) function on `sklearn` using the same flow as this tutorial: https://realpython.com/train-test-split-python-data/#application-of-train_test_split. The code to do so is below. ","metadata":{"id":"TsxggVkp81js"},"pos":31,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1314eb","input":"### Step 2: Do Your Research\nThat is a ton of columns. That is a ton of data! Where do we start? \n\nYou should probably do some research on this dataset to find out what the columns mean. I got it on kaggle - you can read about it here: [Wisconsin Breast Cancer Dataset](https://www.kaggle.com/datasets/uciml/breast-cancer-wisconsin-data).\n","metadata":{"id":"XjS_4CFYxx52"},"pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"20d44e","input":"**TODO:** Can you print the outputs with print(y_train) and print(y_test)? What do these 1's and 0's represent?","metadata":{"id":"tY5UwAsS9sCV"},"pos":35,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"24f66b","input":"**TODO:** Now that our outcome column is there, we need to remove the diagnosis column that had the bad data, right? Please do so below.\n","metadata":{"id":"kXUk3fFs5VxV"},"pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"35d4e7","input":"**TODO:** Do you remember how to print the first five rows of a pandas dataframe? How about all of the columns? How about the number of rows? Please do that below and google anything you are unsure about. ","metadata":{"id":"rdwjqFR8xdE2"},"pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"613443","input":"**Ok, we've got our dummy variables. What now?** Now we have to pick one and add it to our dataframe -- we also have to delete the old diagnosis column!","metadata":{"id":"YXI5tmDd5CKh"},"pos":20,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"674c62","input":"Compute your MSE below. Is this higher or lower than KNN? Which one would you recommend so far?","metadata":{"id":"k-ANsXzitBdu"},"pos":59,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"76c3c7","input":"**TODO:** at this point, all of our data should be numeric except for our diagnosis column. This is because supervised machine learning models work off of numerical data. Use breast_cancer.info() below to check that all our data besides 'diagnosis' are numeric.","metadata":{"id":"X1yX_YUAz8ti"},"pos":16,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7adb37","input":"Do you remember how to fit a model? What parts of our data do we fit/train on? You can go look at the section above for inspiration.","metadata":{"id":"Bk4rua0er_QF"},"pos":55,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"99d37f","input":"Now, create a confusion matrix! How are the results? Do we end up with more false negatives or false positives?","metadata":{"id":"Ge0IHJ7AtQI2"},"pos":61,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9a4207","input":"**Prediction and Evaluation:** How do we know if our model is actually good? We need to **test** our model by giving it a two-step quiz. \n\nStep 1: We let our model use our testing inputs (`x_test`) to make predictions that guess the whether the patient has benign or malignant tumors (we call these predictions `y_hat`). In this case our `y_hat`'s are a bunch of 1's and 0's that represent whether our model thinks the patient's tumor is benign or malignant. \n\nWe do this by running our model object's `.predict()` function.","metadata":{"id":"qRJKWrA6hhdf"},"pos":43,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9e6d9f","input":"Now create some predictions and set them equal to `y_hat`. You can look above or google how to make predictions on sklearn if you get confused!","metadata":{"id":"4oAExynzsveF"},"pos":57,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"af67e8","input":"**Not too bad!** MSE represents  the average error (difference) between our model and the correct result. A low mean squared error means that our model makes the correct guess most of the time. \n\nBut we have to think about the nature of the problem. As Data Scientists, do we want to tell someone that we have this average error when we are predicting something as serious as breast cancer? \n\nAnd what does an error mean? Are we telling them they don't have a malignant tumor (y_hat=0) when they actually do (y_test = 1)? Are we telling them they have a tumor (y_hat=1) when they actually don't (y_test = 0)?\n\nWe can get insights on this through a confusion matrix. ","metadata":{"id":"bYj4HCmOmH42"},"pos":49,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b080dc","input":"Amazing, now try changing your kernel and seeing how your results change. You can research what kernels are available here: https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html. If your interested in more ML with SKLearn you should get used to pages like these!","metadata":{"id":"6AyqrZd9v9BR"},"pos":63,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b3c2cb","input":"# Who is ready to learn? (Our Machines Are!)\n\nOur task at hand -- building an AI that can save lives.\n\nToday we are going to work to create an AI that can predict whether a breast cancer tumor is benign or malignant. This diagnosis has incredibly important medical implications for those who are diagnosed with breast cancer. \n\nBefore we get started, you should make sure you know what the difference between benign and malignant tumors are and discuss them with your team.\n\n**Hint:** we recommend you heavily refer to your EDA mini project from last week for this activity! ","metadata":{"id":"R9tvKItivlxp"},"pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"bbe003","input":"### Code Your Own Machine Learning Model\n\nIt's time for us to create our own classifier. Let's go with an [SVM](https://www.youtube.com/watch?v=_YPScrckx28). We will do the first step for you.\n\nI know it was a lot of information in the last section, but the code is *basically* the same. Since our data is already split, you will follow the same steps to fit your model, make some predictions, evaluate the performance, and visualize your confusion matrix.","metadata":{"id":"ObvQ_3pPmPBf"},"pos":53,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c6af81","input":"**TODO:** Can you figure out how many rows are malignant (M) and how many are benign (B)? \n\n","metadata":{"id":"Q8MwFiBX0Zdu"},"pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ceb3e8","input":"And there you have it. We have a K Nearest Neighbors model that will look at the 7 nearest neighbors, and gave it a nice nickname, my_KNN_model. <br> <br>\n\n**Fitting (Training) the model object:** **Supervised machine learning** training involves learning from past results (`y_train`) and past inputs (`x_train`). We pass these to our model for learning to teach our model to answer the question \"*based on these inputs, what outputs can we expect?*\"\n<br>\n\nTo do this, we want to let this model learn from our data. We do so by running our model object's `.fit()` function on our training data.","metadata":{"id":"IzQ8yZj5Q0Eg"},"pos":41,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d2f1fb","input":"### Dummy Variables - Preprocessing\nOur target variable (the variable we are trying to predict) is `diagnosis`. Our only problem is that the diagnosis variable will either be an 'M' or a 'B', which is not something our model will understand. We need to change our M's to 1's and B's to 0's so that our model can think like computers do -- using numbers!  \n\nTo do so, we use something called a dummy variable. I'll show you how to do so below. ","metadata":{"id":"c4ocJucC3-p2"},"pos":18,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d74b9b","input":"### Visualize our data\nNow that we've cleaned our data and it is all ready for our model, we should understand some of the relationships. Use your learnings from last week to create two plots -- you can always start with simple [scatter plots](https://plotly.com/python/line-and-scatter/) or maybe a [scatterplot matrix](https://plotly.com/python/splom/). Get creative!","metadata":{"id":"jhMq9yAj3x78"},"pos":24,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"dd8ae0","input":"**What is this???** I encourage you and your team to read about it here: https://towardsdatascience.com/understanding-confusion-matrix-a9ad42dcfd62. You should define what true positives, true negatives, false positives, and false negatives represent for this scenario. \n\nDiscuss what other  findings you can take away, and talk with your instructor about metrics like accuracy, precision and recall!","metadata":{"id":"mCR5MW5gp0ni"},"pos":51,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"dfeaf8","input":"### Step 3: Cleaning our data up!\n\nMaybe there are some columns we don't need. The last column makes zero sense right? Do we need an id column for our purposes? You should drop **any** columns that you feel are not worth keeping track of. \n\nPandas' `drop()` documentation: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop.html. Remember to use `inplace = True` if you are changing your dataframe and note creating a new one!\n\n**Note:** This data is pretty clean! We only need a few lines for this dataset.","metadata":{"id":"ujuEOdIYyaV8"},"pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e7de4f","input":"**Creating the model object:**  we need to create an instance of the model. This is like having a model and giving it a nickname so we can remember it, change it, and save it to work custom on our dataset. ","metadata":{"id":"tv1P3go2_U5O"},"pos":39,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ec0549","input":"**TODO:** can you look at the shape of the x_train, x_test, y_train, and y_test columns? Why does the shape of these columns make sense? ","metadata":{"id":"rcQ-PJQF9XSA"},"pos":33,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f39d2e","input":"### Are you ready to perform machine learning? \nDo you think deciding whether a tumor is benign or malignant is classification or regression? Talk with your team for a minute.\n\nEither way, we need to tell our code what our target variable is, and what our input is going to be. <br> **TODO:** Can you do so below?","metadata":{"id":"EvyKXnr27SaE"},"pos":28,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f9868d","input":"### Step 1: Imports and Preprocessing\n\nWe need to `import pandas as pd` and read in our data. It is currently a .csv (comma-separated value) file, and we generally use the pd.read_csv() function from pandas to read our data into a dataframe.","metadata":{"id":"m-qQYrLDw0EN"},"pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fb5122","input":"### We have split, now we gotta fit!\nNow that are data is preprocessed (all numerical), and split (80/20 train/test) for machine learning, we can create a model to **classify** whether a patient has malignant (1) or benign (0) breast cancer!\n\nThe first model is a classification model called K Nearest Neighbors. You can watch a video on how K Nearest Neighbors works here: https://www.youtube.com/watch?v=0p0o5cmgLdE.\n\nFirst things first, we need to import our model using SKLearn. You can follow the [guide]( https://scikit-learn.org/stable/auto_examples/neighbors/plot_classification.html#sphx-glr-auto-examples-neighbors-plot-classification-py) here to see how this tutorial works.\n","metadata":{"id":"2lWxo646-Fka"},"pos":37,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fd6d51","input":"**The last step!!** We need to change parameters and data to improve our model as we go. If we can make even 1 more correct cancer prediction, it is worth it, right? \n\n**TODO:** Go back and change the value of `k` in the **creating your model object** section and re-run all the code below it. See what changes with your MSE and confusion matrix!","metadata":{"id":"tbo3cueVq7EV"},"pos":52,"state":"done","type":"cell"}
{"id":"a7aa42","input":"","pos":67,"type":"cell"}
{"id":"f04df6","input":"","pos":66,"type":"cell"}
{"id":0,"time":1657044598918,"type":"user"}
{"last_load":1657040871913,"type":"file"}